{"version":3,"file":"pixi-projection.js","sources":["../node_modules/@pixi/constants/lib/index.mjs","../src/base/webgl/Sprite2dRenderer.ts","../src/base/AbstractProjection.ts","../src/base/LinearProjection.ts","../src/base/webgl/UniformBatchRenderer.ts","../src/base/index.ts","../src/utils.ts","../src/proj2d/Matrix2d.ts","../src/proj2d/tiling/TilingSprite2dRenderer.ts","../src/proj2d/Projection2d.ts","../src/proj2d/Container2d.ts","../src/proj2d/mesh/Mesh2d.ts","../src/proj2d/sprites/Sprite2d.ts","../src/proj2d/tiling/TilingSprite2d.ts","../src/proj2d/sprites/convert.ts","../src/proj2d/sprites/Text2d.ts","../src/proj2d/z_masks/SpriteMaskFilter.ts","../src/proj2d/z_masks/MaskHacker.ts","../src/proj2d/index.ts","../src/proj3d/Point3d.ts","../src/proj3d/Euler.ts","../src/proj3d/ObservableEuler.ts","../src/proj3d/Matrix3d.ts","../src/proj3d/Projection3d.ts","../src/proj3d/Container3d.ts","../src/proj3d/Camera3d.ts","../src/proj3d/mesh/Mesh3d2d.ts","../src/proj3d/sprites/Sprite3d.ts","../src/proj3d/sprites/convert.ts","../src/proj3d/sprites/Text3d.ts","../src/curve/SpriteBilinearRenderer.ts","../src/curve/BaseSurface.ts","../src/curve/BilinearSurface.ts","../src/curve/ProjectionSurface.ts","../src/curve/sprites/Sprite2s.ts","../src/curve/sprites/convert.ts","../src/curve/sprites/Text2s.ts","../src/curve/index.ts","../src/spine/Spine2d.ts","../src/spine/Spine3d.ts"],"sourcesContent":["var ENV = /* @__PURE__ */ ((ENV2) => {\n  ENV2[ENV2[\"WEBGL_LEGACY\"] = 0] = \"WEBGL_LEGACY\";\n  ENV2[ENV2[\"WEBGL\"] = 1] = \"WEBGL\";\n  ENV2[ENV2[\"WEBGL2\"] = 2] = \"WEBGL2\";\n  return ENV2;\n})(ENV || {});\nvar RENDERER_TYPE = /* @__PURE__ */ ((RENDERER_TYPE2) => {\n  RENDERER_TYPE2[RENDERER_TYPE2[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  RENDERER_TYPE2[RENDERER_TYPE2[\"WEBGL\"] = 1] = \"WEBGL\";\n  RENDERER_TYPE2[RENDERER_TYPE2[\"CANVAS\"] = 2] = \"CANVAS\";\n  return RENDERER_TYPE2;\n})(RENDERER_TYPE || {});\nvar BUFFER_BITS = /* @__PURE__ */ ((BUFFER_BITS2) => {\n  BUFFER_BITS2[BUFFER_BITS2[\"COLOR\"] = 16384] = \"COLOR\";\n  BUFFER_BITS2[BUFFER_BITS2[\"DEPTH\"] = 256] = \"DEPTH\";\n  BUFFER_BITS2[BUFFER_BITS2[\"STENCIL\"] = 1024] = \"STENCIL\";\n  return BUFFER_BITS2;\n})(BUFFER_BITS || {});\nvar BLEND_MODES = /* @__PURE__ */ ((BLEND_MODES2) => {\n  BLEND_MODES2[BLEND_MODES2[\"NORMAL\"] = 0] = \"NORMAL\";\n  BLEND_MODES2[BLEND_MODES2[\"ADD\"] = 1] = \"ADD\";\n  BLEND_MODES2[BLEND_MODES2[\"MULTIPLY\"] = 2] = \"MULTIPLY\";\n  BLEND_MODES2[BLEND_MODES2[\"SCREEN\"] = 3] = \"SCREEN\";\n  BLEND_MODES2[BLEND_MODES2[\"OVERLAY\"] = 4] = \"OVERLAY\";\n  BLEND_MODES2[BLEND_MODES2[\"DARKEN\"] = 5] = \"DARKEN\";\n  BLEND_MODES2[BLEND_MODES2[\"LIGHTEN\"] = 6] = \"LIGHTEN\";\n  BLEND_MODES2[BLEND_MODES2[\"COLOR_DODGE\"] = 7] = \"COLOR_DODGE\";\n  BLEND_MODES2[BLEND_MODES2[\"COLOR_BURN\"] = 8] = \"COLOR_BURN\";\n  BLEND_MODES2[BLEND_MODES2[\"HARD_LIGHT\"] = 9] = \"HARD_LIGHT\";\n  BLEND_MODES2[BLEND_MODES2[\"SOFT_LIGHT\"] = 10] = \"SOFT_LIGHT\";\n  BLEND_MODES2[BLEND_MODES2[\"DIFFERENCE\"] = 11] = \"DIFFERENCE\";\n  BLEND_MODES2[BLEND_MODES2[\"EXCLUSION\"] = 12] = \"EXCLUSION\";\n  BLEND_MODES2[BLEND_MODES2[\"HUE\"] = 13] = \"HUE\";\n  BLEND_MODES2[BLEND_MODES2[\"SATURATION\"] = 14] = \"SATURATION\";\n  BLEND_MODES2[BLEND_MODES2[\"COLOR\"] = 15] = \"COLOR\";\n  BLEND_MODES2[BLEND_MODES2[\"LUMINOSITY\"] = 16] = \"LUMINOSITY\";\n  BLEND_MODES2[BLEND_MODES2[\"NORMAL_NPM\"] = 17] = \"NORMAL_NPM\";\n  BLEND_MODES2[BLEND_MODES2[\"ADD_NPM\"] = 18] = \"ADD_NPM\";\n  BLEND_MODES2[BLEND_MODES2[\"SCREEN_NPM\"] = 19] = \"SCREEN_NPM\";\n  BLEND_MODES2[BLEND_MODES2[\"NONE\"] = 20] = \"NONE\";\n  BLEND_MODES2[BLEND_MODES2[\"SRC_OVER\"] = 0] = \"SRC_OVER\";\n  BLEND_MODES2[BLEND_MODES2[\"SRC_IN\"] = 21] = \"SRC_IN\";\n  BLEND_MODES2[BLEND_MODES2[\"SRC_OUT\"] = 22] = \"SRC_OUT\";\n  BLEND_MODES2[BLEND_MODES2[\"SRC_ATOP\"] = 23] = \"SRC_ATOP\";\n  BLEND_MODES2[BLEND_MODES2[\"DST_OVER\"] = 24] = \"DST_OVER\";\n  BLEND_MODES2[BLEND_MODES2[\"DST_IN\"] = 25] = \"DST_IN\";\n  BLEND_MODES2[BLEND_MODES2[\"DST_OUT\"] = 26] = \"DST_OUT\";\n  BLEND_MODES2[BLEND_MODES2[\"DST_ATOP\"] = 27] = \"DST_ATOP\";\n  BLEND_MODES2[BLEND_MODES2[\"ERASE\"] = 26] = \"ERASE\";\n  BLEND_MODES2[BLEND_MODES2[\"SUBTRACT\"] = 28] = \"SUBTRACT\";\n  BLEND_MODES2[BLEND_MODES2[\"XOR\"] = 29] = \"XOR\";\n  return BLEND_MODES2;\n})(BLEND_MODES || {});\nvar DRAW_MODES = /* @__PURE__ */ ((DRAW_MODES2) => {\n  DRAW_MODES2[DRAW_MODES2[\"POINTS\"] = 0] = \"POINTS\";\n  DRAW_MODES2[DRAW_MODES2[\"LINES\"] = 1] = \"LINES\";\n  DRAW_MODES2[DRAW_MODES2[\"LINE_LOOP\"] = 2] = \"LINE_LOOP\";\n  DRAW_MODES2[DRAW_MODES2[\"LINE_STRIP\"] = 3] = \"LINE_STRIP\";\n  DRAW_MODES2[DRAW_MODES2[\"TRIANGLES\"] = 4] = \"TRIANGLES\";\n  DRAW_MODES2[DRAW_MODES2[\"TRIANGLE_STRIP\"] = 5] = \"TRIANGLE_STRIP\";\n  DRAW_MODES2[DRAW_MODES2[\"TRIANGLE_FAN\"] = 6] = \"TRIANGLE_FAN\";\n  return DRAW_MODES2;\n})(DRAW_MODES || {});\nvar FORMATS = /* @__PURE__ */ ((FORMATS2) => {\n  FORMATS2[FORMATS2[\"RGBA\"] = 6408] = \"RGBA\";\n  FORMATS2[FORMATS2[\"RGB\"] = 6407] = \"RGB\";\n  FORMATS2[FORMATS2[\"RG\"] = 33319] = \"RG\";\n  FORMATS2[FORMATS2[\"RED\"] = 6403] = \"RED\";\n  FORMATS2[FORMATS2[\"RGBA_INTEGER\"] = 36249] = \"RGBA_INTEGER\";\n  FORMATS2[FORMATS2[\"RGB_INTEGER\"] = 36248] = \"RGB_INTEGER\";\n  FORMATS2[FORMATS2[\"RG_INTEGER\"] = 33320] = \"RG_INTEGER\";\n  FORMATS2[FORMATS2[\"RED_INTEGER\"] = 36244] = \"RED_INTEGER\";\n  FORMATS2[FORMATS2[\"ALPHA\"] = 6406] = \"ALPHA\";\n  FORMATS2[FORMATS2[\"LUMINANCE\"] = 6409] = \"LUMINANCE\";\n  FORMATS2[FORMATS2[\"LUMINANCE_ALPHA\"] = 6410] = \"LUMINANCE_ALPHA\";\n  FORMATS2[FORMATS2[\"DEPTH_COMPONENT\"] = 6402] = \"DEPTH_COMPONENT\";\n  FORMATS2[FORMATS2[\"DEPTH_STENCIL\"] = 34041] = \"DEPTH_STENCIL\";\n  return FORMATS2;\n})(FORMATS || {});\nvar TARGETS = /* @__PURE__ */ ((TARGETS2) => {\n  TARGETS2[TARGETS2[\"TEXTURE_2D\"] = 3553] = \"TEXTURE_2D\";\n  TARGETS2[TARGETS2[\"TEXTURE_CUBE_MAP\"] = 34067] = \"TEXTURE_CUBE_MAP\";\n  TARGETS2[TARGETS2[\"TEXTURE_2D_ARRAY\"] = 35866] = \"TEXTURE_2D_ARRAY\";\n  TARGETS2[TARGETS2[\"TEXTURE_CUBE_MAP_POSITIVE_X\"] = 34069] = \"TEXTURE_CUBE_MAP_POSITIVE_X\";\n  TARGETS2[TARGETS2[\"TEXTURE_CUBE_MAP_NEGATIVE_X\"] = 34070] = \"TEXTURE_CUBE_MAP_NEGATIVE_X\";\n  TARGETS2[TARGETS2[\"TEXTURE_CUBE_MAP_POSITIVE_Y\"] = 34071] = \"TEXTURE_CUBE_MAP_POSITIVE_Y\";\n  TARGETS2[TARGETS2[\"TEXTURE_CUBE_MAP_NEGATIVE_Y\"] = 34072] = \"TEXTURE_CUBE_MAP_NEGATIVE_Y\";\n  TARGETS2[TARGETS2[\"TEXTURE_CUBE_MAP_POSITIVE_Z\"] = 34073] = \"TEXTURE_CUBE_MAP_POSITIVE_Z\";\n  TARGETS2[TARGETS2[\"TEXTURE_CUBE_MAP_NEGATIVE_Z\"] = 34074] = \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";\n  return TARGETS2;\n})(TARGETS || {});\nvar TYPES = /* @__PURE__ */ ((TYPES2) => {\n  TYPES2[TYPES2[\"UNSIGNED_BYTE\"] = 5121] = \"UNSIGNED_BYTE\";\n  TYPES2[TYPES2[\"UNSIGNED_SHORT\"] = 5123] = \"UNSIGNED_SHORT\";\n  TYPES2[TYPES2[\"UNSIGNED_SHORT_5_6_5\"] = 33635] = \"UNSIGNED_SHORT_5_6_5\";\n  TYPES2[TYPES2[\"UNSIGNED_SHORT_4_4_4_4\"] = 32819] = \"UNSIGNED_SHORT_4_4_4_4\";\n  TYPES2[TYPES2[\"UNSIGNED_SHORT_5_5_5_1\"] = 32820] = \"UNSIGNED_SHORT_5_5_5_1\";\n  TYPES2[TYPES2[\"UNSIGNED_INT\"] = 5125] = \"UNSIGNED_INT\";\n  TYPES2[TYPES2[\"UNSIGNED_INT_10F_11F_11F_REV\"] = 35899] = \"UNSIGNED_INT_10F_11F_11F_REV\";\n  TYPES2[TYPES2[\"UNSIGNED_INT_2_10_10_10_REV\"] = 33640] = \"UNSIGNED_INT_2_10_10_10_REV\";\n  TYPES2[TYPES2[\"UNSIGNED_INT_24_8\"] = 34042] = \"UNSIGNED_INT_24_8\";\n  TYPES2[TYPES2[\"UNSIGNED_INT_5_9_9_9_REV\"] = 35902] = \"UNSIGNED_INT_5_9_9_9_REV\";\n  TYPES2[TYPES2[\"BYTE\"] = 5120] = \"BYTE\";\n  TYPES2[TYPES2[\"SHORT\"] = 5122] = \"SHORT\";\n  TYPES2[TYPES2[\"INT\"] = 5124] = \"INT\";\n  TYPES2[TYPES2[\"FLOAT\"] = 5126] = \"FLOAT\";\n  TYPES2[TYPES2[\"FLOAT_32_UNSIGNED_INT_24_8_REV\"] = 36269] = \"FLOAT_32_UNSIGNED_INT_24_8_REV\";\n  TYPES2[TYPES2[\"HALF_FLOAT\"] = 36193] = \"HALF_FLOAT\";\n  return TYPES2;\n})(TYPES || {});\nvar SAMPLER_TYPES = /* @__PURE__ */ ((SAMPLER_TYPES2) => {\n  SAMPLER_TYPES2[SAMPLER_TYPES2[\"FLOAT\"] = 0] = \"FLOAT\";\n  SAMPLER_TYPES2[SAMPLER_TYPES2[\"INT\"] = 1] = \"INT\";\n  SAMPLER_TYPES2[SAMPLER_TYPES2[\"UINT\"] = 2] = \"UINT\";\n  return SAMPLER_TYPES2;\n})(SAMPLER_TYPES || {});\nvar SCALE_MODES = /* @__PURE__ */ ((SCALE_MODES2) => {\n  SCALE_MODES2[SCALE_MODES2[\"NEAREST\"] = 0] = \"NEAREST\";\n  SCALE_MODES2[SCALE_MODES2[\"LINEAR\"] = 1] = \"LINEAR\";\n  return SCALE_MODES2;\n})(SCALE_MODES || {});\nvar WRAP_MODES = /* @__PURE__ */ ((WRAP_MODES2) => {\n  WRAP_MODES2[WRAP_MODES2[\"CLAMP\"] = 33071] = \"CLAMP\";\n  WRAP_MODES2[WRAP_MODES2[\"REPEAT\"] = 10497] = \"REPEAT\";\n  WRAP_MODES2[WRAP_MODES2[\"MIRRORED_REPEAT\"] = 33648] = \"MIRRORED_REPEAT\";\n  return WRAP_MODES2;\n})(WRAP_MODES || {});\nvar MIPMAP_MODES = /* @__PURE__ */ ((MIPMAP_MODES2) => {\n  MIPMAP_MODES2[MIPMAP_MODES2[\"OFF\"] = 0] = \"OFF\";\n  MIPMAP_MODES2[MIPMAP_MODES2[\"POW2\"] = 1] = \"POW2\";\n  MIPMAP_MODES2[MIPMAP_MODES2[\"ON\"] = 2] = \"ON\";\n  MIPMAP_MODES2[MIPMAP_MODES2[\"ON_MANUAL\"] = 3] = \"ON_MANUAL\";\n  return MIPMAP_MODES2;\n})(MIPMAP_MODES || {});\nvar ALPHA_MODES = /* @__PURE__ */ ((ALPHA_MODES2) => {\n  ALPHA_MODES2[ALPHA_MODES2[\"NPM\"] = 0] = \"NPM\";\n  ALPHA_MODES2[ALPHA_MODES2[\"UNPACK\"] = 1] = \"UNPACK\";\n  ALPHA_MODES2[ALPHA_MODES2[\"PMA\"] = 2] = \"PMA\";\n  ALPHA_MODES2[ALPHA_MODES2[\"NO_PREMULTIPLIED_ALPHA\"] = 0] = \"NO_PREMULTIPLIED_ALPHA\";\n  ALPHA_MODES2[ALPHA_MODES2[\"PREMULTIPLY_ON_UPLOAD\"] = 1] = \"PREMULTIPLY_ON_UPLOAD\";\n  ALPHA_MODES2[ALPHA_MODES2[\"PREMULTIPLIED_ALPHA\"] = 2] = \"PREMULTIPLIED_ALPHA\";\n  return ALPHA_MODES2;\n})(ALPHA_MODES || {});\nvar CLEAR_MODES = /* @__PURE__ */ ((CLEAR_MODES2) => {\n  CLEAR_MODES2[CLEAR_MODES2[\"NO\"] = 0] = \"NO\";\n  CLEAR_MODES2[CLEAR_MODES2[\"YES\"] = 1] = \"YES\";\n  CLEAR_MODES2[CLEAR_MODES2[\"AUTO\"] = 2] = \"AUTO\";\n  CLEAR_MODES2[CLEAR_MODES2[\"BLEND\"] = 0] = \"BLEND\";\n  CLEAR_MODES2[CLEAR_MODES2[\"CLEAR\"] = 1] = \"CLEAR\";\n  CLEAR_MODES2[CLEAR_MODES2[\"BLIT\"] = 2] = \"BLIT\";\n  return CLEAR_MODES2;\n})(CLEAR_MODES || {});\nvar GC_MODES = /* @__PURE__ */ ((GC_MODES2) => {\n  GC_MODES2[GC_MODES2[\"AUTO\"] = 0] = \"AUTO\";\n  GC_MODES2[GC_MODES2[\"MANUAL\"] = 1] = \"MANUAL\";\n  return GC_MODES2;\n})(GC_MODES || {});\nvar PRECISION = /* @__PURE__ */ ((PRECISION2) => {\n  PRECISION2[\"LOW\"] = \"lowp\";\n  PRECISION2[\"MEDIUM\"] = \"mediump\";\n  PRECISION2[\"HIGH\"] = \"highp\";\n  return PRECISION2;\n})(PRECISION || {});\nvar MASK_TYPES = /* @__PURE__ */ ((MASK_TYPES2) => {\n  MASK_TYPES2[MASK_TYPES2[\"NONE\"] = 0] = \"NONE\";\n  MASK_TYPES2[MASK_TYPES2[\"SCISSOR\"] = 1] = \"SCISSOR\";\n  MASK_TYPES2[MASK_TYPES2[\"STENCIL\"] = 2] = \"STENCIL\";\n  MASK_TYPES2[MASK_TYPES2[\"SPRITE\"] = 3] = \"SPRITE\";\n  MASK_TYPES2[MASK_TYPES2[\"COLOR\"] = 4] = \"COLOR\";\n  return MASK_TYPES2;\n})(MASK_TYPES || {});\nvar COLOR_MASK_BITS = /* @__PURE__ */ ((COLOR_MASK_BITS2) => {\n  COLOR_MASK_BITS2[COLOR_MASK_BITS2[\"RED\"] = 1] = \"RED\";\n  COLOR_MASK_BITS2[COLOR_MASK_BITS2[\"GREEN\"] = 2] = \"GREEN\";\n  COLOR_MASK_BITS2[COLOR_MASK_BITS2[\"BLUE\"] = 4] = \"BLUE\";\n  COLOR_MASK_BITS2[COLOR_MASK_BITS2[\"ALPHA\"] = 8] = \"ALPHA\";\n  return COLOR_MASK_BITS2;\n})(COLOR_MASK_BITS || {});\nvar MSAA_QUALITY = /* @__PURE__ */ ((MSAA_QUALITY2) => {\n  MSAA_QUALITY2[MSAA_QUALITY2[\"NONE\"] = 0] = \"NONE\";\n  MSAA_QUALITY2[MSAA_QUALITY2[\"LOW\"] = 2] = \"LOW\";\n  MSAA_QUALITY2[MSAA_QUALITY2[\"MEDIUM\"] = 4] = \"MEDIUM\";\n  MSAA_QUALITY2[MSAA_QUALITY2[\"HIGH\"] = 8] = \"HIGH\";\n  return MSAA_QUALITY2;\n})(MSAA_QUALITY || {});\nvar BUFFER_TYPE = /* @__PURE__ */ ((BUFFER_TYPE2) => {\n  BUFFER_TYPE2[BUFFER_TYPE2[\"ELEMENT_ARRAY_BUFFER\"] = 34963] = \"ELEMENT_ARRAY_BUFFER\";\n  BUFFER_TYPE2[BUFFER_TYPE2[\"ARRAY_BUFFER\"] = 34962] = \"ARRAY_BUFFER\";\n  BUFFER_TYPE2[BUFFER_TYPE2[\"UNIFORM_BUFFER\"] = 35345] = \"UNIFORM_BUFFER\";\n  return BUFFER_TYPE2;\n})(BUFFER_TYPE || {});\n\nexport { ALPHA_MODES, BLEND_MODES, BUFFER_BITS, BUFFER_TYPE, CLEAR_MODES, COLOR_MASK_BITS, DRAW_MODES, ENV, FORMATS, GC_MODES, MASK_TYPES, MIPMAP_MODES, MSAA_QUALITY, PRECISION, RENDERER_TYPE, SAMPLER_TYPES, SCALE_MODES, TARGETS, TYPES, WRAP_MODES };\n//# sourceMappingURL=index.mjs.map\n","import {\n    BatchRenderer,\n    BatchShaderGenerator,\n    ViewableBuffer,\n    Buffer,\n    Geometry,\n    ExtensionType, Color, Renderer\n} from '@pixi/core';\nimport { TYPES } from '@pixi/constants';\n\nconst shaderVert\n    = `precision highp float;\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\ngl_Position.xyw = projectionMatrix * aVertexPosition;\ngl_Position.z = 0.0;\n\nvTextureCoord = aTextureCoord;\nvTextureId = aTextureId;\nvColor = aColor;\n}\n`;\nconst shaderFrag = `\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\nuniform sampler2D uSamplers[%count%];\n\nvoid main(void){\nvec4 color;\n%forloop%\ngl_FragColor = color * vColor;\n}`;\n\nexport class Batch3dGeometry extends Geometry\n{\n    _buffer: Buffer;\n    _indexBuffer : Buffer;\n\n    constructor(_static = false)\n    {\n        super();\n\n        this._buffer = new Buffer(null, _static, false);\n\n        this._indexBuffer = new Buffer(null, _static, true);\n\n        this.addAttribute('aVertexPosition', this._buffer, 3, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aColor', this._buffer, 4, true, TYPES.UNSIGNED_BYTE)\n            .addAttribute('aTextureId', this._buffer, 1, true, TYPES.FLOAT)\n            .addIndex(this._indexBuffer);\n    }\n}\n\nexport class Batch2dRenderer extends BatchRenderer\n{\n    static extension = {\n        name: 'batch2d',\n        type: ExtensionType.RendererPlugin\n    };\n\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n        this.geometryClass = Batch3dGeometry;\n        this.vertexSize = 7;\n    }\n\n    setShaderGenerator()\n    {\n        this.shaderGenerator = new BatchShaderGenerator(\n            shaderVert,\n            shaderFrag\n        );\n    }\n\n    // eslint-disable-next-line max-len\n    packInterleavedGeometry(element: any, attributeBuffer: ViewableBuffer, indexBuffer: Uint16Array, aIndex: number, iIndex: number)\n    {\n        const {\n            uint32View,\n            float32View,\n        } = attributeBuffer;\n\n        const p = aIndex / this.vertexSize;// float32View.length / 6 / 2;\n        const uvs = element.uvs;\n        const indices = element.indices;// geometry.getIndex().data;// indicies;\n        const vertexData = element.vertexData;\n        const vertexData2d = element.vertexData2d;\n        const textureId = element._texture.baseTexture._batchLocation;\n\n        const alpha = Math.min(element.worldAlpha, 1.0);\n\n        const argb = Color.shared\n            .setValue(element._tintRGB)\n            .toPremultiplied(alpha, element._texture.baseTexture.alphaMode > 0);\n\n        if (vertexData2d)\n        {\n            let j = 0;\n\n            for (let i = 0; i < vertexData2d.length; i += 3, j += 2)\n            {\n                float32View[aIndex++] = vertexData2d[i];\n                float32View[aIndex++] = vertexData2d[i + 1];\n                float32View[aIndex++] = vertexData2d[i + 2];\n                float32View[aIndex++] = uvs[j];\n                float32View[aIndex++] = uvs[j + 1];\n                uint32View[aIndex++] = argb;\n                float32View[aIndex++] = textureId;\n            }\n        }\n        else\n        {\n            for (let i = 0; i < vertexData.length; i += 2)\n            {\n                float32View[aIndex++] = vertexData[i];\n                float32View[aIndex++] = vertexData[i + 1];\n                float32View[aIndex++] = 1.0;\n                float32View[aIndex++] = uvs[i];\n                float32View[aIndex++] = uvs[i + 1];\n                uint32View[aIndex++] = argb;\n                float32View[aIndex++] = textureId;\n            }\n        }\n\n        for (let i = 0; i < indices.length; i++)\n        {\n            indexBuffer[iIndex++] = p + indices[i];\n        }\n    }\n}\n","import { Transform } from '@pixi/math';\n\nexport class AbstractProjection\n{\n    constructor(legacy: Transform, enable = true)\n    {\n        this.legacy = legacy;\n\n        if (enable)\n        {\n            this.enabled = true;\n        }\n\n        // sorry for hidden class, it would be good to have special projection field in official pixi\n        // TODO: pixi 6.1.0 global mixin\n        (this.legacy as any).proj = this;\n    }\n\n    legacy: Transform;\n\n    _enabled = false;\n\n    get enabled(): boolean\n    {\n        return this._enabled;\n    }\n\n    set enabled(value: boolean)\n    {\n        this._enabled = value;\n    }\n\n    clear(): void\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    {\n    }\n}\n\nexport enum TRANSFORM_STEP\n    {\n    NONE = 0,\n    // POS = 1,\n    // ROT = 2,\n    // SCALE = 3,\n    // PIVOT = 4,\n    BEFORE_PROJ = 4,\n    PROJ = 5,\n    // POS_2 = 6,\n    // ROT_2 = 7,\n    // SCALE_2 = 8,\n    // PIVOT_2 = 9,\n    ALL = 9\n}\n","import { AbstractProjection } from './AbstractProjection';\nimport { Matrix, Transform } from '@pixi/math';\nimport type { Projection2d } from '../proj2d';\n\nexport enum AFFINE\n    {\n    NONE = 0,\n    FREE = 1,\n    AXIS_X = 2,\n    AXIS_Y = 3,\n    POINT = 4,\n    AXIS_XR = 5\n}\n\nexport function transformHack(this: Transform, parentTransform: Transform): void\n{\n    // implementation here\n    // TODO: pixi 6.1.0 global mixin\n    const proj = (this as any).proj as LinearProjection<any>;\n    const ta = this as any;\n    const pwid = (parentTransform as any)._worldID;\n\n    const lt = ta.localTransform;\n    const scaleAfterAffine = proj.scaleAfterAffine && proj.affine >= 2;\n\n    // this part is copied from\n    if (ta._localID !== ta._currentLocalID)\n    {\n        // get the matrix values of the displayobject based on its transform properties..\n        if (scaleAfterAffine)\n        {\n            lt.a = ta._cx;\n            lt.b = ta._sx;\n            lt.c = ta._cy;\n            lt.d = ta._sy;\n\n            lt.tx = ta.position._x;\n            lt.ty = ta.position._y;\n        }\n        else\n        {\n            lt.a = ta._cx * ta.scale._x;\n            lt.b = ta._sx * ta.scale._x;\n            lt.c = ta._cy * ta.scale._y;\n            lt.d = ta._sy * ta.scale._y;\n\n            lt.tx = ta.position._x - ((ta.pivot._x * lt.a) + (ta.pivot._y * lt.c));\n            lt.ty = ta.position._y - ((ta.pivot._x * lt.b) + (ta.pivot._y * lt.d));\n        }\n\n        ta._currentLocalID = ta._localID;\n\n        // force an update..\n        proj._currentProjID = -1;\n    }\n\n    const _matrixID = proj._projID;\n\n    if (proj._currentProjID !== _matrixID)\n    {\n        proj._currentProjID = _matrixID;\n        proj.updateLocalTransform(lt);\n        ta._parentID = -1;\n    }\n\n    if (ta._parentID !== pwid)\n    {\n        // TODO: pixi 6.1.0 global mixin\n        const pp = (parentTransform as any).proj as Projection2d;\n\n        if (pp && !pp._affine)\n        {\n            proj.world.setToMult(pp.world, proj.local);\n        }\n        else\n        {\n            proj.world.setToMultLegacy(parentTransform.worldTransform, proj.local);\n        }\n\n        const wa = ta.worldTransform;\n\n        proj.world.copyTo(wa, proj._affine, proj.affinePreserveOrientation);\n\n        if (scaleAfterAffine)\n        {\n            wa.a *= ta.scale._x;\n            wa.b *= ta.scale._x;\n            wa.c *= ta.scale._y;\n            wa.d *= ta.scale._y;\n\n            wa.tx -= ((ta.pivot._x * wa.a) + (ta.pivot._y * wa.c));\n            wa.ty -= ((ta.pivot._x * wa.b) + (ta.pivot._y * wa.d));\n        }\n        ta._parentID = pwid;\n        ta._worldID++;\n    }\n}\n\nexport class LinearProjection<T> extends AbstractProjection\n{\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateLocalTransform(lt: Matrix): void\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    {\n    }\n\n    _projID = 0;\n    _currentProjID = -1;\n    _affine = AFFINE.NONE;\n    affinePreserveOrientation = false;\n    scaleAfterAffine = true;\n\n    set affine(value: AFFINE)\n    {\n        if (this._affine === value) return;\n        this._affine = value;\n        this._currentProjID = -1;\n        // this is because scaleAfterAffine\n        (this.legacy as any)._currentLocalID = -1;\n    }\n\n    get affine(): AFFINE\n    {\n        return this._affine;\n    }\n\n    local: T;\n    world: T;\n\n    // eslint-disable-next-line accessor-pairs\n    set enabled(value: boolean)\n    {\n        if (value === this._enabled)\n        {\n            return;\n        }\n        this._enabled = value;\n        if (value)\n        {\n            this.legacy.updateTransform = transformHack;\n            (this.legacy as any)._parentID = -1;\n        }\n        else\n        {\n            this.legacy.updateTransform = Transform.prototype.updateTransform;\n            (this.legacy as any)._parentID = -1;\n        }\n    }\n\n    clear(): void\n    {\n        this._currentProjID = -1;\n        this._projID = 0;\n    }\n}\n","import {\n    BatchRenderer,\n    ViewableBuffer,\n    BatchTextureArray\n} from '@pixi/core';\nimport { Dict, premultiplyBlendMode } from '@pixi/utils';\nimport { Sprite } from '@pixi/sprite';\n\nexport class UniformBatchRenderer extends BatchRenderer\n{\n    _iIndex: number;\n    _aIndex: number;\n    _dcIndex: number;\n    _bufferedElements: Array<any>;\n    _attributeBuffer: ViewableBuffer;\n    _indexBuffer: Uint16Array;\n    vertexSize: number;\n    forceMaxTextures = 0;\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getUniforms(sprite: Sprite): any\n    {\n        return this.defUniforms;\n    }\n\n    syncUniforms(obj: Dict<any>): void\n    {\n        if (!obj) return;\n        const sh = this._shader;\n\n        for (const key in obj)\n        {\n            sh.uniforms[key] = obj[key];\n        }\n    }\n\n    defUniforms = {};\n\n    buildDrawCalls(texArray: BatchTextureArray, start: number, finish: number): void\n    {\n        const thisAny = this as any;\n\n        const {\n            _bufferedElements: elements,\n            _attributeBuffer,\n            _indexBuffer,\n            vertexSize,\n        } = this;\n        const drawCalls = BatchRenderer._drawCallPool;\n\n        let dcIndex: number = this._dcIndex;\n        let aIndex: number = this._aIndex;\n        let iIndex: number = this._iIndex;\n\n        let drawCall = drawCalls[dcIndex] as any;\n\n        drawCall.start = this._iIndex;\n        drawCall.texArray = texArray;\n\n        for (let i = start; i < finish; ++i)\n        {\n            const sprite = elements[i];\n            const tex = sprite._texture.baseTexture;\n            const spriteBlendMode = premultiplyBlendMode[\n                tex.alphaMode ? 1 : 0][sprite.blendMode];\n            const uniforms = this.getUniforms(sprite);\n\n            elements[i] = null;\n\n            // here is the difference\n            if (start < i && (drawCall.blend !== spriteBlendMode || drawCall.uniforms !== uniforms))\n            {\n                drawCall.size = iIndex - drawCall.start;\n                start = i;\n                drawCall = drawCalls[++dcIndex];\n                drawCall.texArray = texArray;\n                drawCall.start = iIndex;\n            }\n\n            this.packInterleavedGeometry(sprite, _attributeBuffer, _indexBuffer, aIndex, iIndex);\n            aIndex += sprite.vertexData.length / 2 * vertexSize;\n            iIndex += sprite.indices.length;\n\n            drawCall.blend = spriteBlendMode;\n            // here is the difference\n            drawCall.uniforms = uniforms;\n        }\n\n        if (start < finish)\n        {\n            drawCall.size = iIndex - drawCall.start;\n            ++dcIndex;\n        }\n\n        thisAny._dcIndex = dcIndex;\n        thisAny._aIndex = aIndex;\n        thisAny._iIndex = iIndex;\n    }\n\n    drawBatches(): void\n    {\n        const dcCount = this._dcIndex;\n        const { gl, state: stateSystem, shader: shaderSystem } = this.renderer;\n        const drawCalls = BatchRenderer._drawCallPool;\n        let curUniforms: any = null;\n        let curTexArray: BatchTextureArray = null;\n\n        for (let i = 0; i < dcCount; i++)\n        {\n            const { texArray, type, size, start, blend, uniforms } = drawCalls[i] as any;\n\n            if (curTexArray !== texArray)\n            {\n                curTexArray = texArray;\n                this.bindAndClearTexArray(texArray);\n            }\n            // here is the difference\n            if (curUniforms !== uniforms)\n            {\n                curUniforms = uniforms;\n                this.syncUniforms(uniforms);\n                (shaderSystem as any).syncUniformGroup((this._shader as any).uniformGroup);\n            }\n\n            this.state.blendMode = blend;\n            stateSystem.set(this.state);\n            gl.drawElements(type, size, gl.UNSIGNED_SHORT, start * 2);\n        }\n    }\n\n    contextChange(): void\n    {\n        if (!this.forceMaxTextures)\n        {\n            super.contextChange();\n            this.syncUniforms(this.defUniforms);\n\n            return;\n        }\n\n        // we can override maxTextures with this hack\n\n        const thisAny = this as any;\n\n        thisAny.maxTextures = this.forceMaxTextures;\n        this._shader = thisAny.shaderGenerator.generateShader(this.maxTextures);\n        this.syncUniforms(this.defUniforms);\n        for (let i = 0; i < thisAny._packedGeometryPoolSize; i++)\n        {\n            /* eslint-disable max-len */\n            thisAny._packedGeometries[i] = new (this.geometryClass)();\n        }\n        this.initFlushBuffers();\n    }\n}\n","import { extensions } from '@pixi/core';\nimport { Batch2dRenderer } from './webgl/Sprite2dRenderer';\n\nexport * from './AbstractProjection';\nexport * from './LinearProjection';\nexport * from './webgl/Sprite2dRenderer';\nexport * from './webgl/UniformBatchRenderer';\n\nextensions.add(Batch2dRenderer);\n","/* eslint-disable no-mixed-operators */\nimport { IPointData, Point } from '@pixi/math';\n\n// eslint-disable-next-line max-len\nexport function getIntersectionFactor(p1: IPointData, p2: IPointData, p3: IPointData, p4: IPointData, out: IPointData): number\n{\n    const A1 = p2.x - p1.x; const B1 = p3.x - p4.x;\n    const C1 = p3.x - p1.x;\n    const A2 = p2.y - p1.y; const B2 = p3.y - p4.y;\n    const C2 = p3.y - p1.y;\n    const D = A1 * B2 - A2 * B1;\n\n    if (Math.abs(D) < 1e-7)\n    {\n        out.x = A1;\n        out.y = A2;\n\n        return 0;\n    }\n    const T = C1 * B2 - C2 * B1;\n    const U = A1 * C2 - A2 * C1;\n\n    const t = T / D; const\n        u = U / D;\n\n    if (u < (1e-6) || u - 1 > -1e-6)\n    {\n        return -1;\n    }\n\n    out.x = p1.x + t * (p2.x - p1.x);\n    out.y = p1.y + t * (p2.y - p1.y);\n\n    return 1;\n}\n\nexport function getPositionFromQuad(p: Array<IPointData>, anchor: IPointData, out: IPointData): IPointData\n{\n    out = out || new Point();\n    const a1 = 1.0 - anchor.x; const\n        a2 = 1.0 - a1;\n    const b1 = 1.0 - anchor.y; const\n        b2 = 1.0 - b1;\n\n    out.x = (p[0].x * a1 + p[1].x * a2) * b1 + (p[3].x * a1 + p[2].x * a2) * b2;\n    out.y = (p[0].y * a1 + p[1].y * a2) * b1 + (p[3].y * a1 + p[2].y * a2) * b2;\n\n    return out;\n}\n","/* eslint-disable no-mixed-operators,max-statements-per-line */\n// according to https://jsperf.com/obj-vs-array-view-access/1 , Float64Array is the best here\nimport { IPointData, Matrix, Point } from '@pixi/math';\nimport { AFFINE } from '../base';\n\nconst mat3id = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\nexport class Matrix2d\n{\n    /**\n     * A default (identity) matrix\n     *\n     * @static\n     * @const\n     */\n    static readonly IDENTITY = new Matrix2d();\n\n    /**\n     * A temp matrix\n     *\n     * @static\n     * @const\n     */\n    static readonly TEMP_MATRIX = new Matrix2d();\n\n    /**\n     * mat3 implementation through array of 9 elements\n     */\n    mat3: Float64Array;\n\n    floatArray: Float32Array = null;\n\n    constructor(backingArray?: ArrayLike<number>)\n    {\n        this.mat3 = new Float64Array(backingArray || mat3id);\n    }\n\n    get a(): number\n    {\n        return this.mat3[0] / this.mat3[8];\n    }\n\n    set a(value: number)\n    {\n        this.mat3[0] = value * this.mat3[8];\n    }\n\n    get b(): number\n    {\n        return this.mat3[1] / this.mat3[8];\n    }\n\n    set b(value: number)\n    {\n        this.mat3[1] = value * this.mat3[8];\n    }\n\n    get c(): number\n    {\n        return this.mat3[3] / this.mat3[8];\n    }\n\n    set c(value: number)\n    {\n        this.mat3[3] = value * this.mat3[8];\n    }\n\n    get d(): number\n    {\n        return this.mat3[4] / this.mat3[8];\n    }\n\n    set d(value: number)\n    {\n        this.mat3[4] = value * this.mat3[8];\n    }\n\n    get tx(): number\n    {\n        return this.mat3[6] / this.mat3[8];\n    }\n\n    set tx(value: number)\n    {\n        this.mat3[6] = value * this.mat3[8];\n    }\n\n    get ty(): number\n    {\n        return this.mat3[7] / this.mat3[8];\n    }\n\n    set ty(value: number)\n    {\n        this.mat3[7] = value * this.mat3[8];\n    }\n\n    set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        const mat3 = this.mat3;\n\n        mat3[0] = a;\n        mat3[1] = b;\n        mat3[2] = 0;\n        mat3[3] = c;\n        mat3[4] = d;\n        mat3[5] = 0;\n        mat3[6] = tx;\n        mat3[7] = ty;\n        mat3[8] = 1;\n\n        return this;\n    }\n\n    toArray(transpose?: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.floatArray)\n        {\n            this.floatArray = new Float32Array(9);\n        }\n\n        const array = out || this.floatArray;\n        const mat3 = this.mat3;\n\n        if (transpose)\n        {\n            array[0] = mat3[0];\n            array[1] = mat3[1];\n            array[2] = mat3[2];\n            array[3] = mat3[3];\n            array[4] = mat3[4];\n            array[5] = mat3[5];\n            array[6] = mat3[6];\n            array[7] = mat3[7];\n            array[8] = mat3[8];\n        }\n        else\n        {\n            // this branch is NEVER USED in pixi\n            array[0] = mat3[0];\n            array[1] = mat3[3];\n            array[2] = mat3[6];\n            array[3] = mat3[1];\n            array[4] = mat3[4];\n            array[5] = mat3[7];\n            array[6] = mat3[2];\n            array[7] = mat3[5];\n            array[8] = mat3[8];\n        }\n\n        return array;\n    }\n\n    // TODO: remove props\n    apply(pos: IPointData, newPos: IPointData): IPointData\n    {\n        newPos = newPos || new Point();\n\n        const mat3 = this.mat3;\n        const x = pos.x;\n        const y = pos.y;\n\n        const z = 1.0 / (mat3[2] * x + mat3[5] * y + mat3[8]);\n\n        newPos.x = z * (mat3[0] * x + mat3[3] * y + mat3[6]);\n        newPos.y = z * (mat3[1] * x + mat3[4] * y + mat3[7]);\n\n        return newPos;\n    }\n\n    translate(tx: number, ty: number): this\n    {\n        const mat3 = this.mat3;\n\n        mat3[0] += tx * mat3[2];\n        mat3[1] += ty * mat3[2];\n        mat3[3] += tx * mat3[5];\n        mat3[4] += ty * mat3[5];\n        mat3[6] += tx * mat3[8];\n        mat3[7] += ty * mat3[8];\n\n        return this;\n    }\n\n    scale(x: number, y: number): this\n    {\n        const mat3 = this.mat3;\n\n        mat3[0] *= x;\n        mat3[1] *= y;\n        mat3[3] *= x;\n        mat3[4] *= y;\n        mat3[6] *= x;\n        mat3[7] *= y;\n\n        return this;\n    }\n\n    scaleAndTranslate(scaleX: number, scaleY: number, tx: number, ty: number): void\n    {\n        const mat3 = this.mat3;\n\n        mat3[0] = scaleX * mat3[0] + tx * mat3[2];\n        mat3[1] = scaleY * mat3[1] + ty * mat3[2];\n        mat3[3] = scaleX * mat3[3] + tx * mat3[5];\n        mat3[4] = scaleY * mat3[4] + ty * mat3[5];\n        mat3[6] = scaleX * mat3[6] + tx * mat3[8];\n        mat3[7] = scaleY * mat3[7] + ty * mat3[8];\n    }\n\n    // TODO: remove props\n    applyInverse(pos: IPointData, newPos: IPointData): IPointData\n    {\n        newPos = newPos || new Point();\n\n        const a = this.mat3;\n        const x = pos.x;\n        const y = pos.y;\n\n        const a00 = a[0]; const a01 = a[3]; const a02 = a[6];\n        const a10 = a[1]; const a11 = a[4]; const a12 = a[7];\n        const a20 = a[2]; const a21 = a[5]; const\n            a22 = a[8];\n\n        const newX = (a22 * a11 - a12 * a21) * x + (-a22 * a01 + a02 * a21) * y + (a12 * a01 - a02 * a11);\n        const newY = (-a22 * a10 + a12 * a20) * x + (a22 * a00 - a02 * a20) * y + (-a12 * a00 + a02 * a10);\n        const newZ = (a21 * a10 - a11 * a20) * x + (-a21 * a00 + a01 * a20) * y + (a11 * a00 - a01 * a10);\n\n        newPos.x = newX / newZ;\n        newPos.y = newY / newZ;\n\n        return newPos;\n    }\n\n    invert(): Matrix2d\n    {\n        const a = this.mat3;\n\n        const a00 = a[0]; const a01 = a[1]; const a02 = a[2];\n        const a10 = a[3]; const a11 = a[4]; const a12 = a[5];\n        const a20 = a[6]; const a21 = a[7]; const a22 = a[8];\n\n        const b01 = a22 * a11 - a12 * a21;\n        const b11 = -a22 * a10 + a12 * a20;\n        const b21 = a21 * a10 - a11 * a20;\n\n        // Calculate the determinant\n        let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n        if (!det)\n        {\n            return this;\n        }\n        det = 1.0 / det;\n\n        a[0] = b01 * det;\n        a[1] = (-a22 * a01 + a02 * a21) * det;\n        a[2] = (a12 * a01 - a02 * a11) * det;\n        a[3] = b11 * det;\n        a[4] = (a22 * a00 - a02 * a20) * det;\n        a[5] = (-a12 * a00 + a02 * a10) * det;\n        a[6] = b21 * det;\n        a[7] = (-a21 * a00 + a01 * a20) * det;\n        a[8] = (a11 * a00 - a01 * a10) * det;\n\n        return this;\n    }\n\n    identity(): Matrix2d\n    {\n        const mat3 = this.mat3;\n\n        mat3[0] = 1;\n        mat3[1] = 0;\n        mat3[2] = 0;\n        mat3[3] = 0;\n        mat3[4] = 1;\n        mat3[5] = 0;\n        mat3[6] = 0;\n        mat3[7] = 0;\n        mat3[8] = 1;\n\n        return this;\n    }\n\n    clone(): Matrix2d\n    {\n        return new Matrix2d(this.mat3);\n    }\n\n    copyTo2dOr3d(matrix: Matrix2d): Matrix2d\n    {\n        const mat3 = this.mat3;\n        const ar2 = matrix.mat3;\n\n        ar2[0] = mat3[0];\n        ar2[1] = mat3[1];\n        ar2[2] = mat3[2];\n        ar2[3] = mat3[3];\n        ar2[4] = mat3[4];\n        ar2[5] = mat3[5];\n        ar2[6] = mat3[6];\n        ar2[7] = mat3[7];\n        ar2[8] = mat3[8];\n\n        return matrix;\n    }\n\n    /**\n     * legacy method, change the values of given pixi matrix\n     * @param matrix\n     * @param affine\n     * @param preserveOrientation\n     * @return matrix\n     */\n    copyTo(matrix: Matrix, affine?: AFFINE, preserveOrientation?: boolean): Matrix\n    {\n        const mat3 = this.mat3;\n        const d = 1.0 / mat3[8];\n        const tx = mat3[6] * d; const\n            ty = mat3[7] * d;\n\n        matrix.a = (mat3[0] - mat3[2] * tx) * d;\n        matrix.b = (mat3[1] - mat3[2] * ty) * d;\n        matrix.c = (mat3[3] - mat3[5] * tx) * d;\n        matrix.d = (mat3[4] - mat3[5] * ty) * d;\n        matrix.tx = tx;\n        matrix.ty = ty;\n\n        if (affine >= 2)\n        {\n            let D = matrix.a * matrix.d - matrix.b * matrix.c;\n\n            if (!preserveOrientation)\n            {\n                D = Math.abs(D);\n            }\n            if (affine === AFFINE.POINT)\n            {\n                if (D > 0)\n                {\n                    D = 1;\n                }\n                else D = -1;\n                matrix.a = D;\n                matrix.b = 0;\n                matrix.c = 0;\n                matrix.d = D;\n            }\n            else if (affine === AFFINE.AXIS_X)\n            {\n                D /= Math.sqrt(matrix.b * matrix.b + matrix.d * matrix.d);\n                matrix.c = 0;\n                matrix.d = D;\n            }\n            else if (affine === AFFINE.AXIS_Y)\n            {\n                D /= Math.sqrt(matrix.a * matrix.a + matrix.c * matrix.c);\n                matrix.a = D;\n                matrix.c = 0;\n            }\n            else if (affine === AFFINE.AXIS_XR)\n            {\n                matrix.a = matrix.d * D;\n                matrix.c = -matrix.b * D;\n            }\n        }\n\n        return matrix;\n    }\n\n    /**\n     * legacy method, change the values of given pixi matrix\n     * @param matrix\n     * @return\n     */\n    copyFrom(matrix: Matrix): this\n    {\n        const mat3 = this.mat3;\n\n        mat3[0] = matrix.a;\n        mat3[1] = matrix.b;\n        mat3[2] = 0;\n        mat3[3] = matrix.c;\n        mat3[4] = matrix.d;\n        mat3[5] = 0;\n        mat3[6] = matrix.tx;\n        mat3[7] = matrix.ty;\n        mat3[8] = 1.0;\n\n        return this;\n    }\n\n    setToMultLegacy(pt: Matrix, lt: Matrix2d): this\n    {\n        const out = this.mat3;\n        const b = lt.mat3;\n\n        const a00 = pt.a; const a01 = pt.b;\n        const a10 = pt.c; const a11 = pt.d;\n        const a20 = pt.tx; const a21 = pt.ty;\n\n        const b00 = b[0]; const b01 = b[1]; const b02 = b[2];\n        const b10 = b[3]; const b11 = b[4]; const b12 = b[5];\n        const b20 = b[6]; const b21 = b[7]; const\n            b22 = b[8];\n\n        out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n        out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n        out[2] = b02;\n\n        out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n        out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n        out[5] = b12;\n\n        out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n        out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n        out[8] = b22;\n\n        return this;\n    }\n\n    setToMultLegacy2(pt: Matrix2d, lt: Matrix): this\n    {\n        const out = this.mat3;\n        const a = pt.mat3;\n\n        const a00 = a[0]; const a01 = a[1]; const a02 = a[2];\n        const a10 = a[3]; const a11 = a[4]; const a12 = a[5];\n        const a20 = a[6]; const a21 = a[7]; const a22 = a[8];\n\n        const b00 = lt.a; const b01 = lt.b;\n        const b10 = lt.c; const b11 = lt.d;\n        const b20 = lt.tx; const\n            b21 = lt.ty;\n\n        out[0] = b00 * a00 + b01 * a10;\n        out[1] = b00 * a01 + b01 * a11;\n        out[2] = b00 * a02 + b01 * a12;\n\n        out[3] = b10 * a00 + b11 * a10;\n        out[4] = b10 * a01 + b11 * a11;\n        out[5] = b10 * a02 + b11 * a12;\n\n        out[6] = b20 * a00 + b21 * a10 + a20;\n        out[7] = b20 * a01 + b21 * a11 + a21;\n        out[8] = b20 * a02 + b21 * a12 + a22;\n\n        return this;\n    }\n\n    // that's transform multiplication we use\n    setToMult(pt: Matrix2d, lt: Matrix2d): this\n    {\n        const out = this.mat3;\n        const a = pt.mat3; const\n            b = lt.mat3;\n\n        const a00 = a[0]; const a01 = a[1]; const a02 = a[2];\n        const a10 = a[3]; const a11 = a[4]; const a12 = a[5];\n        const a20 = a[6]; const a21 = a[7]; const a22 = a[8];\n\n        const b00 = b[0]; const b01 = b[1]; const b02 = b[2];\n        const b10 = b[3]; const b11 = b[4]; const b12 = b[5];\n        const b20 = b[6]; const b21 = b[7]; const\n            b22 = b[8];\n\n        out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n        out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n        out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n        out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n        out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n        out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n        out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n        out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n        out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n\n        return this;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    prepend(lt: any): this\n    {\n        if (lt.mat3)\n        {\n            return this.setToMult(lt, this);\n        }\n\n        return this.setToMultLegacy(lt, this);\n    }\n}\n","import { Matrix2d } from '../Matrix2d';\nimport { ExtensionMetadata, ExtensionType, ObjectRenderer, QuadUv, Renderer, Shader } from '@pixi/core';\nimport { DRAW_MODES, WRAP_MODES } from '@pixi/constants';\nimport { correctBlendMode, premultiplyTintToRgba } from '@pixi/utils';\n\nconst shaderVert\n    = `attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform mat3 uTransform;\n\nvarying vec3 vTextureCoord;\n\nvoid main(void)\n{\ngl_Position.xyw = projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0);\n\nvTextureCoord = uTransform * vec3(aTextureCoord, 1.0);\n}\n`;\nconst shaderFrag = `\nvarying vec3 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec4 uColor;\nuniform mat3 uMapCoord;\nuniform vec4 uClampFrame;\nuniform vec2 uClampOffset;\n\nvoid main(void)\n{\nvec2 coord = mod(vTextureCoord.xy / vTextureCoord.z - uClampOffset, vec2(1.0, 1.0)) + uClampOffset;\ncoord = (uMapCoord * vec3(coord, 1.0)).xy;\ncoord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\nvec4 sample = texture2D(uSampler, coord);\ngl_FragColor = sample * uColor;\n}\n`;\nconst shaderSimpleFrag = `\nvarying vec3 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec4 uColor;\n\nvoid main(void)\n{\nvec4 sample = texture2D(uSampler, vTextureCoord.xy / vTextureCoord.z);\ngl_FragColor = sample * uColor;\n}\n`;\n\n// changed\nconst tempMat = new Matrix2d();\n\nexport class TilingSprite2dRenderer extends ObjectRenderer\n{\n    static extension: ExtensionMetadata = {\n        name: 'tilingSprite2d',\n        type: ExtensionType.RendererPlugin,\n    };\n\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        const uniforms = { globals: this.renderer.globalUniforms };\n\n        this.shader = Shader.from(shaderVert, shaderFrag, uniforms);\n\n        this.simpleShader = Shader.from(shaderVert, shaderSimpleFrag, uniforms);\n    }\n\n    shader: Shader;\n    simpleShader: Shader;\n    quad = new QuadUv();\n\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    render(ts: any): void\n    {\n        const renderer = this.renderer;\n        const quad = this.quad;\n\n        let vertices = quad.vertices;\n\n        vertices[0] = vertices[6] = (ts._width) * -ts.anchor.x;\n        vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n\n        vertices[2] = vertices[4] = (ts._width) * (1.0 - ts.anchor.x);\n        vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n\n        if (ts.uvRespectAnchor)\n        {\n            vertices = quad.uvs;\n\n            vertices[0] = vertices[6] = -ts.anchor.x;\n            vertices[1] = vertices[3] = -ts.anchor.y;\n\n            vertices[2] = vertices[4] = 1.0 - ts.anchor.x;\n            vertices[5] = vertices[7] = 1.0 - ts.anchor.y;\n        }\n\n        quad.invalidate();\n\n        const tex = ts._texture;\n        const baseTex = tex.baseTexture;\n        const lt = ts.tileProj.world;\n        const uv = ts.uvMatrix;\n        let isSimple = baseTex.isPowerOfTwo\n            && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n\n        // auto, force repeat wrapMode for big tiling textures\n        if (isSimple)\n        {\n            if (!baseTex._glTextures[(renderer as any).CONTEXT_UID])\n            {\n                if (baseTex.wrapMode === WRAP_MODES.CLAMP)\n                {\n                    baseTex.wrapMode = WRAP_MODES.REPEAT;\n                }\n            }\n            else\n            {\n                isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n            }\n        }\n\n        const shader = isSimple ? this.simpleShader : this.shader;\n\n        // changed\n        tempMat.identity();\n        tempMat.scale(tex.width, tex.height);\n        tempMat.prepend(lt);\n        tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n\n        tempMat.invert();\n        if (isSimple)\n        {\n            tempMat.prepend(uv.mapCoord);\n        }\n        else\n        {\n            shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n            shader.uniforms.uClampFrame = uv.uClampFrame;\n            shader.uniforms.uClampOffset = uv.uClampOffset;\n        }\n\n        shader.uniforms.uTransform = tempMat.toArray(true);\n        shader.uniforms.uColor = premultiplyTintToRgba(ts.tint, ts.worldAlpha,\n            shader.uniforms.uColor, baseTex.premultiplyAlpha);\n        shader.uniforms.translationMatrix = ts.worldTransform.toArray(true);\n        shader.uniforms.uSampler = tex;\n\n        renderer.shader.bind(shader, false);\n        renderer.geometry.bind(quad as any, undefined);// , renderer.shader.getGLShader());\n\n        renderer.state.setBlendMode(correctBlendMode(ts.blendMode, baseTex.premultiplyAlpha));\n        renderer.geometry.draw(DRAW_MODES.TRIANGLES, 6, 0);\n    }\n}\n","/* eslint-disable no-mixed-operators */\nimport { Matrix2d } from './Matrix2d';\nimport { IPointData, Matrix, ObservablePoint, Point, Rectangle, Transform } from '@pixi/math';\nimport { Sprite } from '@pixi/sprite';\nimport { LinearProjection } from '../base';\nimport { getIntersectionFactor } from '../utils';\n\nconst t0 = new Point();\nconst tt = [new Point(), new Point(), new Point(), new Point()];\nconst tempRect = new Rectangle();\nconst tempMat = new Matrix2d();\n\nexport class Projection2d extends LinearProjection<Matrix2d>\n{\n    constructor(legacy: Transform, enable?: boolean)\n    {\n        super(legacy, enable);\n        this.local = new Matrix2d();\n        this.world = new Matrix2d();\n    }\n\n    matrix = new Matrix2d();\n    pivot = new ObservablePoint(this.onChange, this, 0, 0);\n\n    reverseLocalOrder = false;\n\n    onChange(): void\n    {\n        const pivot = this.pivot;\n        const mat3 = this.matrix.mat3;\n\n        mat3[6] = -(pivot._x * mat3[0] + pivot._y * mat3[3]);\n        mat3[7] = -(pivot._x * mat3[1] + pivot._y * mat3[4]);\n\n        this._projID++;\n    }\n\n    setAxisX(p: IPointData, factor = 1): void\n    {\n        const x = p.x; const\n            y = p.y;\n        const d = Math.sqrt(x * x + y * y);\n        const mat3 = this.matrix.mat3;\n\n        mat3[0] = x / d;\n        mat3[1] = y / d;\n        mat3[2] = factor / d;\n\n        this.onChange();\n    }\n\n    setAxisY(p: IPointData, factor = 1): void\n    {\n        const x = p.x; const\n            y = p.y;\n        const d = Math.sqrt(x * x + y * y);\n        const mat3 = this.matrix.mat3;\n\n        mat3[3] = x / d;\n        mat3[4] = y / d;\n        mat3[5] = factor / d;\n        this.onChange();\n    }\n\n    mapSprite(sprite: Sprite, quad: Array<IPointData>): void\n    {\n        const tex = sprite.texture;\n\n        tempRect.x = -sprite.anchor.x * tex.orig.width;\n        tempRect.y = -sprite.anchor.y * tex.orig.height;\n        tempRect.width = tex.orig.width;\n        tempRect.height = tex.orig.height;\n\n        this.mapQuad(tempRect, quad);\n    }\n\n    mapQuad(rect: Rectangle, p: Array<IPointData>): void\n    {\n        // utils.getPositionFromQuad(p, anchor, t0);\n        tt[0].set(rect.x, rect.y);\n        tt[1].set(rect.x + rect.width, rect.y);\n        tt[2].set(rect.x + rect.width, rect.y + rect.height);\n        tt[3].set(rect.x, rect.y + rect.height);\n\n        let k1 = 1; let k2 = 2;\n        let k3 = 3;\n        const f = getIntersectionFactor(p[0], p[2], p[1], p[3], t0);\n\n        if (f !== 0)\n        {\n            k1 = 1;\n            k2 = 3;\n            k3 = 2;\n        }\n        else\n        {\n            return;\n            /* f = utils.getIntersectionFactor(p[0], p[1], p[2], p[3], t0);\n            if (f > 0) {\n                k1 = 2;\n                k2 = 3;\n                k3 = 1;\n            } else {\n                f = utils.getIntersectionFactor(p[0], p[3], p[1], p[2], t0);\n                if (f > 0) {\n                    // cant find it :(\n                    k1 = 1;\n                    k2 = 2;\n                    k3 = 3;\n                } else {\n                    return;\n                }\n            }*/\n        }\n        const d0 = Math.sqrt((p[0].x - t0.x) * (p[0].x - t0.x) + (p[0].y - t0.y) * (p[0].y - t0.y));\n        const d1 = Math.sqrt((p[k1].x - t0.x) * (p[k1].x - t0.x) + (p[k1].y - t0.y) * (p[k1].y - t0.y));\n        const d2 = Math.sqrt((p[k2].x - t0.x) * (p[k2].x - t0.x) + (p[k2].y - t0.y) * (p[k2].y - t0.y));\n        const d3 = Math.sqrt((p[k3].x - t0.x) * (p[k3].x - t0.x) + (p[k3].y - t0.y) * (p[k3].y - t0.y));\n\n        const q0 = (d0 + d3) / d3;\n        const q1 = (d1 + d2) / d2;\n        const q2 = (d1 + d2) / d1;\n\n        let mat3 = this.matrix.mat3;\n\n        mat3[0] = tt[0].x * q0;\n        mat3[1] = tt[0].y * q0;\n        mat3[2] = q0;\n        mat3[3] = tt[k1].x * q1;\n        mat3[4] = tt[k1].y * q1;\n        mat3[5] = q1;\n        mat3[6] = tt[k2].x * q2;\n        mat3[7] = tt[k2].y * q2;\n        mat3[8] = q2;\n        this.matrix.invert();\n\n        mat3 = tempMat.mat3;\n        mat3[0] = p[0].x;\n        mat3[1] = p[0].y;\n        mat3[2] = 1;\n        mat3[3] = p[k1].x;\n        mat3[4] = p[k1].y;\n        mat3[5] = 1;\n        mat3[6] = p[k2].x;\n        mat3[7] = p[k2].y;\n        mat3[8] = 1;\n\n        this.matrix.setToMult(tempMat, this.matrix);\n        this._projID++;\n    }\n\n    updateLocalTransform(lt: Matrix): void\n    {\n        if (this._projID !== 0)\n        {\n            if (this.reverseLocalOrder)\n            {\n                // tilingSprite inside order\n                this.local.setToMultLegacy2(this.matrix, lt);\n            }\n            else\n            {\n                // good order\n                this.local.setToMultLegacy(lt, this.matrix);\n            }\n        }\n        else\n        {\n            this.local.copyFrom(lt);\n        }\n    }\n\n    clear(): void\n    {\n        super.clear();\n        this.matrix.identity();\n        this.pivot.set(0, 0);\n    }\n}\n","import { Projection2d } from './Projection2d';\nimport { Container, DisplayObject } from '@pixi/display';\nimport { IPointData, Matrix, Point } from '@pixi/math';\nimport { TRANSFORM_STEP } from '../base';\n\nexport function container2dWorldTransform(): Matrix\n{\n    return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n}\n\nexport class Container2d extends Container\n{\n    constructor()\n    {\n        super();\n        this.proj = new Projection2d(this.transform);\n    }\n\n    proj: Projection2d;\n\n    toLocal<P extends IPointData = Point>(position: IPointData, from?: DisplayObject, point?: P, skipUpdate?: boolean,\n        step = TRANSFORM_STEP.ALL): P\n    {\n        if (from)\n        {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n\n        if (!skipUpdate)\n        {\n            this._recursivePostUpdateTransform();\n        }\n\n        if (step >= TRANSFORM_STEP.PROJ)\n        {\n            if (!skipUpdate)\n            {\n                this.displayObjectUpdateTransform();\n            }\n            if (this.proj.affine)\n            {\n                return this.transform.worldTransform.applyInverse(position, point) as any;\n            }\n\n            return this.proj.world.applyInverse(position, point) as any;\n        }\n\n        if (this.parent)\n        {\n            point = this.parent.worldTransform.applyInverse(position, point) as any;\n        }\n        else\n        {\n            point.x = position.x;\n            point.y = position.y;\n        }\n        if (step === TRANSFORM_STEP.NONE)\n        {\n            return point;\n        }\n\n        return this.transform.localTransform.applyInverse(point, point) as any;\n    }\n\n    get worldTransform(): Matrix\n    {\n        return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n    }\n}\n\nexport const container2dToLocal = Container2d.prototype.toLocal;\n","import { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { Geometry, Program, Renderer, State, Texture } from '@pixi/core';\nimport { Projection2d } from '../Projection2d';\nimport { IPointData, Matrix } from '@pixi/math';\nimport { DisplayObject } from '@pixi/display';\nimport { TRANSFORM_STEP } from '../../base';\nimport { container2dToLocal } from '../Container2d';\n\nexport class Mesh2d extends Mesh\n{\n    static defaultVertexShader\n        = `precision highp float;\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform mat3 uTextureMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\ngl_Position.xyw = projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0);\ngl_Position.z = 0.0;\n\nvTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\n}\n`;\n    static defaultFragmentShader = `\nvarying vec2 vTextureCoord;\nuniform vec4 uColor;\n\nuniform sampler2D uSampler;\n\nvoid main(void)\n{\ngl_FragColor = texture2D(uSampler, vTextureCoord) * uColor;\n}`;\n    constructor(geometry: Geometry, shader: MeshMaterial, state: State, drawMode?: number)\n    {\n        super(geometry, shader, state, drawMode);\n        this.proj = new Projection2d(this.transform);\n    }\n\n    vertexData2d: Float32Array = null;\n    proj: Projection2d;\n\n    calculateVertices(): void\n    {\n        if (this.proj._affine)\n        {\n            this.vertexData2d = null;\n            super.calculateVertices();\n\n            return;\n        }\n\n        const geometry = this.geometry as any;\n        const vertices = geometry.buffers[0].data;\n        const thisAny = this as any;\n\n        if (geometry.vertexDirtyId === thisAny.vertexDirty && thisAny._transformID === thisAny.transform._worldID)\n        {\n            return;\n        }\n\n        thisAny._transformID = thisAny.transform._worldID;\n\n        if (thisAny.vertexData.length !== vertices.length)\n        {\n            thisAny.vertexData = new Float32Array(vertices.length);\n        }\n\n        if (!this.vertexData2d || this.vertexData2d.length !== vertices.length * 3 / 2)\n        {\n            this.vertexData2d = new Float32Array(vertices.length * 3);\n        }\n\n        const wt = this.proj.world.mat3;\n\n        const vertexData2d = this.vertexData2d;\n        const vertexData = thisAny.vertexData;\n\n        for (let i = 0; i < vertexData.length / 2; i++)\n        {\n            const x = vertices[(i * 2)];\n            const y = vertices[(i * 2) + 1];\n\n            const xx = (wt[0] * x) + (wt[3] * y) + wt[6];\n            const yy = (wt[1] * x) + (wt[4] * y) + wt[7];\n            const ww = (wt[2] * x) + (wt[5] * y) + wt[8];\n\n            vertexData2d[i * 3] = xx;\n            vertexData2d[(i * 3) + 1] = yy;\n            vertexData2d[(i * 3) + 2] = ww;\n\n            vertexData[(i * 2)] = xx / ww;\n            vertexData[(i * 2) + 1] = yy / ww;\n        }\n\n        thisAny.vertexDirty = geometry.vertexDirtyId;\n    }\n\n    _renderDefault(renderer: Renderer): void\n    {\n        const shader = this.shader as MeshMaterial;\n\n        shader.alpha = this.worldAlpha;\n        if (shader.update)\n        {\n            shader.update();\n        }\n\n        renderer.batch.flush();\n\n        if ((shader as any).program.uniformData?.translationMatrix)\n        {\n            shader.uniforms.translationMatrix = this.worldTransform.toArray(true);\n        }\n\n        // bind and sync uniforms..\n        renderer.shader.bind(shader, false);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, (this.geometry as any).instanceCount);\n    }\n\n    toLocal<T extends IPointData>(position: IPointData, from?: DisplayObject,\n        point?: T, skipUpdate?: boolean,\n        step = TRANSFORM_STEP.ALL): T\n    {\n        return container2dToLocal.call(this, position, from, point, skipUpdate, step);\n    }\n\n    get worldTransform(): Matrix\n    {\n        return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n    }\n}\n\nexport class SimpleMesh2d extends Mesh2d\n{\n    constructor(texture: Texture, vertices?: Float32Array, uvs?: Float32Array,\n        indices?: Uint16Array, drawMode?: number)\n    {\n        super(new MeshGeometry(vertices, uvs, indices),\n            new MeshMaterial(texture, {\n                program: Program.from(Mesh2d.defaultVertexShader, Mesh2d.defaultFragmentShader),\n                pluginName: 'batch2d'\n            }),\n            null,\n            drawMode);\n\n        (this.geometry.getBuffer('aVertexPosition') as any).static = false;\n    }\n\n    autoUpdate = true;\n\n    get vertices(): Float32Array\n    {\n        return this.geometry.getBuffer('aVertexPosition').data as Float32Array;\n    }\n    set vertices(value: Float32Array)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    protected _render(renderer?: Renderer): void\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n\n        (super._render as any)(renderer);\n    }\n}\n","/* eslint-disable no-mixed-operators */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture } from '@pixi/core';\nimport { Projection2d } from '../Projection2d';\nimport { IPointData, Matrix, Point } from '@pixi/math';\nimport { DisplayObject } from '@pixi/display';\nimport { TRANSFORM_STEP } from '../../base';\nimport { container2dToLocal } from '../Container2d';\n\nexport class Sprite2d extends Sprite\n{\n    constructor(texture: Texture)\n    {\n        super(texture);\n        this.proj = new Projection2d(this.transform);\n        this.pluginName = 'batch2d';\n    }\n\n    vertexData2d: Float32Array = null;\n    proj: Projection2d;\n\n    _calculateBounds(): void\n    {\n        this.calculateTrimmedVertices();\n        this._bounds.addQuad((this as any).vertexTrimmedData);\n    }\n\n    calculateVertices(): void\n    {\n        const texture = this._texture;\n        const thisAny = this as any;\n\n        if (this.proj._affine)\n        {\n            this.vertexData2d = null;\n            super.calculateVertices();\n\n            return;\n        }\n        if (!this.vertexData2d)\n        {\n            this.vertexData2d = new Float32Array(12);\n        }\n\n        const wid = (this.transform as any)._worldID;\n        const tuid = (texture as any)._updateID;\n\n        if (thisAny._transformID === wid && this._textureID === tuid)\n        {\n            return;\n        }\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== tuid)\n        {\n            (this as any).uvs = (texture as any)._uvs.uvsFloat32;\n        }\n\n        thisAny._transformID = wid;\n        this._textureID = tuid;\n\n        const wt = this.proj.world.mat3;\n        const vertexData2d = this.vertexData2d;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0: number;\n        let w1: number;\n        let h0: number;\n        let h1: number;\n\n        if (trim)\n        {\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        vertexData2d[0] = (wt[0] * w1) + (wt[3] * h1) + wt[6];\n        vertexData2d[1] = (wt[1] * w1) + (wt[4] * h1) + wt[7];\n        vertexData2d[2] = (wt[2] * w1) + (wt[5] * h1) + wt[8];\n\n        vertexData2d[3] = (wt[0] * w0) + (wt[3] * h1) + wt[6];\n        vertexData2d[4] = (wt[1] * w0) + (wt[4] * h1) + wt[7];\n        vertexData2d[5] = (wt[2] * w0) + (wt[5] * h1) + wt[8];\n\n        vertexData2d[6] = (wt[0] * w0) + (wt[3] * h0) + wt[6];\n        vertexData2d[7] = (wt[1] * w0) + (wt[4] * h0) + wt[7];\n        vertexData2d[8] = (wt[2] * w0) + (wt[5] * h0) + wt[8];\n\n        vertexData2d[9] = (wt[0] * w1) + (wt[3] * h0) + wt[6];\n        vertexData2d[10] = (wt[1] * w1) + (wt[4] * h0) + wt[7];\n        vertexData2d[11] = (wt[2] * w1) + (wt[5] * h0) + wt[8];\n\n        vertexData[0] = vertexData2d[0] / vertexData2d[2];\n        vertexData[1] = vertexData2d[1] / vertexData2d[2];\n\n        vertexData[2] = vertexData2d[3] / vertexData2d[5];\n        vertexData[3] = vertexData2d[4] / vertexData2d[5];\n\n        vertexData[4] = vertexData2d[6] / vertexData2d[8];\n        vertexData[5] = vertexData2d[7] / vertexData2d[8];\n\n        vertexData[6] = vertexData2d[9] / vertexData2d[11];\n        vertexData[7] = vertexData2d[10] / vertexData2d[11];\n    }\n\n    calculateTrimmedVertices(): void\n    {\n        if (this.proj._affine)\n        {\n            super.calculateTrimmedVertices();\n\n            return;\n        }\n\n        const wid = (this.transform as any)._worldID;\n        const tuid = (this._texture as any)._updateID;\n        const thisAny = this as any;\n\n        if (!thisAny.vertexTrimmedData)\n        {\n            thisAny.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (thisAny._transformTrimmedID === wid && this._textureTrimmedID === tuid)\n        {\n            return;\n        }\n\n        thisAny._transformTrimmedID = wid;\n        this._textureTrimmedID = tuid;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = thisAny.vertexTrimmedData;\n        const orig = texture.orig;\n        const w = (this as any).tileProj ? this._width : orig.width;\n        const h = (this as any).tileProj ? this._height : orig.height;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.proj.world.mat3;\n\n        const w1 = -anchor._x * w;\n        const w0 = w1 + w;\n\n        const h1 = -anchor._y * h;\n        const h0 = h1 + h;\n\n        let z = 1.0 / (wt[2] * w1 + wt[5] * h1 + wt[8]);\n\n        vertexData[0] = z * ((wt[0] * w1) + (wt[3] * h1) + wt[6]);\n        vertexData[1] = z * ((wt[1] * w1) + (wt[4] * h1) + wt[7]);\n\n        z = 1.0 / (wt[2] * w0 + wt[5] * h1 + wt[8]);\n        vertexData[2] = z * ((wt[0] * w0) + (wt[3] * h1) + wt[6]);\n        vertexData[3] = z * ((wt[1] * w0) + (wt[4] * h1) + wt[7]);\n\n        z = 1.0 / (wt[2] * w0 + wt[5] * h0 + wt[8]);\n        vertexData[4] = z * ((wt[0] * w0) + (wt[3] * h0) + wt[6]);\n        vertexData[5] = z * ((wt[1] * w0) + (wt[4] * h0) + wt[7]);\n\n        z = 1.0 / (wt[2] * w1 + wt[5] * h0 + wt[8]);\n        vertexData[6] = z * ((wt[0] * w1) + (wt[3] * h0) + wt[6]);\n        vertexData[7] = z * ((wt[1] * w1) + (wt[4] * h0) + wt[7]);\n    }\n\n    toLocal<P extends IPointData = Point>(position: IPointData, from?: DisplayObject, point?: P, skipUpdate?: boolean,\n        step = TRANSFORM_STEP.ALL): P\n    {\n        return container2dToLocal.call(this, position, from, point, skipUpdate, step);\n    }\n\n    get worldTransform(): Matrix\n    {\n        return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n    }\n}\n","import { Renderer, Texture } from '@pixi/core';\nimport { IPointData, Matrix, Point, Transform } from '@pixi/math';\nimport { Projection2d } from '../Projection2d';\nimport { DisplayObject } from '@pixi/display';\nimport { TRANSFORM_STEP } from '../../base';\nimport { container2dToLocal } from '../Container2d';\nimport { TilingSprite } from '@pixi/sprite-tiling';\n\nconst tempTransform = new Transform();\n\nexport class TilingSprite2d extends TilingSprite\n{\n    constructor(texture: Texture, width: number, height: number)\n    {\n        super(texture, width, height);\n\n        this.tileProj = new Projection2d(this.tileTransform);\n        this.tileProj.reverseLocalOrder = true;\n        this.proj = new Projection2d(this.transform);\n\n        this.pluginName = 'tilingSprite2d';\n        this.uvRespectAnchor = true;\n    }\n\n    tileProj: Projection2d;\n    proj: Projection2d;\n\n    get worldTransform(): Matrix\n    {\n        return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n    }\n\n    toLocal<P extends IPointData = Point>(position: IPointData, from?: DisplayObject, point?: P, skipUpdate?: boolean,\n        step = TRANSFORM_STEP.ALL): P\n    {\n        return container2dToLocal.call(this, position, from, point, skipUpdate, step);\n    }\n\n    _render(renderer: Renderer): void\n    {\n        // tweak our texture temporarily..\n        const texture = this._texture;\n\n        if (!texture || !texture.valid)\n        {\n            return;\n        }\n\n        // changed\n        this.tileTransform.updateTransform(tempTransform);\n        this.uvMatrix.update();\n\n        renderer.batch.setObjectRenderer((renderer.plugins as any)[this.pluginName]);\n        (renderer.plugins as any)[this.pluginName].render(this);\n    }\n}\n","import { Projection2d } from '../Projection2d';\nimport { Container2d, container2dWorldTransform } from '../Container2d';\nimport { TilingSprite } from '@pixi/sprite-tiling';\nimport { Program } from '@pixi/core';\nimport { MeshMaterial } from '@pixi/mesh';\nimport { Mesh2d } from '../mesh/Mesh2d';\nimport { SimpleMesh, SimpleRope } from '@pixi/mesh-extras';\nimport { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { Sprite2d } from './Sprite2d';\nimport { TilingSprite2d } from '../tiling/TilingSprite2d';\n\nfunction convertTo2d()\n{\n    if (this.proj) return;\n    this.proj = new Projection2d(this.transform);\n    this.toLocal = Container2d.prototype.toLocal;\n    Object.defineProperty(this, 'worldTransform', {\n        get: container2dWorldTransform,\n        enumerable: true,\n        configurable: true\n    });\n}\n\nContainer.prototype.convertTo2d = convertTo2d;\n\nSprite.prototype.convertTo2d = function spriteConvertTo2d()\n{\n    if (this.proj) return;\n    this.calculateVertices = Sprite2d.prototype.calculateVertices;\n    this.calculateTrimmedVertices = Sprite2d.prototype.calculateTrimmedVertices;\n    this._calculateBounds = Sprite2d.prototype._calculateBounds;\n    this.pluginName = 'batch2d';\n    convertTo2d.call(this);\n};\n\nContainer.prototype.convertSubtreeTo2d = function convertSubtreeTo2d()\n{\n    this.convertTo2d();\n    for (let i = 0; i < this.children.length; i++)\n    {\n        this.children[i].convertSubtreeTo2d();\n    }\n};\n\nSimpleMesh.prototype.convertTo2d\n    = SimpleRope.prototype.convertTo2d\n        = function meshConvertTo2d()\n        {\n            if (this.proj) return;\n            this.calculateVertices = Mesh2d.prototype.calculateVertices;\n            this._renderDefault = Mesh2d.prototype._renderDefault;\n            if (this.material.pluginName !== 'batch2d')\n            {\n                this.material = new MeshMaterial(this.material.texture, {\n                    program: Program.from(Mesh2d.defaultVertexShader, Mesh2d.defaultFragmentShader),\n                    pluginName: 'batch2d'\n                });\n            }\n            convertTo2d.call(this);\n        };\n\nTilingSprite.prototype.convertTo2d = function tilingConvertTo2d()\n{\n    if (this.proj) return;\n\n    this.tileProj = new Projection2d(this.tileTransform);\n    this.tileProj.reverseLocalOrder = true;\n    this.uvRespectAnchor = true;\n\n    this.calculateTrimmedVertices = Sprite2d.prototype.calculateTrimmedVertices;\n    this._calculateBounds = Sprite2d.prototype._calculateBounds;\n    this._render = TilingSprite2d.prototype._render;\n\n    this.pluginName = 'tilingSprite2d';\n    convertTo2d.call(this);\n};\n","import { Text, TextStyle } from '@pixi/text';\nimport { Projection2d } from '../Projection2d';\nimport { Sprite2d } from './Sprite2d';\nimport { Matrix } from '@pixi/math';\n\nexport class Text2d extends Text\n{\n    constructor(text?: string, style?: TextStyle, canvas?: HTMLCanvasElement)\n    {\n        super(text, style, canvas);\n        this.proj = new Projection2d(this.transform);\n        this.pluginName = 'batch2d';\n    }\n\n    proj: Projection2d;\n    vertexData2d: Float32Array = null;\n\n    get worldTransform(): Matrix\n    {\n        return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n    }\n}\n\nText2d.prototype.calculateVertices = Sprite2d.prototype.calculateVertices;\nText2d.prototype.calculateTrimmedVertices = Sprite2d.prototype.calculateTrimmedVertices;\n(Text2d.prototype as any)._calculateBounds = Sprite2d.prototype._calculateBounds;\n","import { Sprite } from '@pixi/sprite';\nimport { Matrix2d } from '../Matrix2d';\nimport { Filter, FilterSystem, RenderTexture, TextureMatrix } from '@pixi/core';\nimport { Projection2d } from '../Projection2d';\n\nconst spriteMaskVert = `\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 otherMatrix;\n\nvarying vec3 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\ngl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\nvTextureCoord = aTextureCoord;\nvMaskCoord = otherMatrix * vec3( aTextureCoord, 1.0);\n}\n`;\nconst spriteMaskFrag = `\nvarying vec3 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform sampler2D mask;\nuniform float alpha;\nuniform vec4 maskClamp;\n\nvoid main(void)\n{\nvec2 uv = vMaskCoord.xy / vMaskCoord.z;\n\nfloat clip = step(3.5,\n    step(maskClamp.x, uv.x) +\n    step(maskClamp.y, uv.y) +\n    step(uv.x, maskClamp.z) +\n    step(uv.y, maskClamp.w));\n\nvec4 original = texture2D(uSampler, vTextureCoord);\nvec4 masky = texture2D(mask, uv);\n\noriginal *= (masky.r * masky.a * alpha * clip);\n\ngl_FragColor = original;\n}\n`;\n\nconst tempMat = new Matrix2d();\n\nexport class SpriteMaskFilter2d extends Filter\n{\n    constructor(sprite: Sprite)\n    {\n        super(spriteMaskVert, spriteMaskFrag);\n\n        sprite.renderable = false;\n\n        this.maskSprite = sprite;\n    }\n\n    maskSprite: Sprite;\n    maskMatrix = new Matrix2d();\n\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture,\n        clearMode?: number): void\n    {\n        const maskSprite = this.maskSprite;\n        const tex = this.maskSprite.texture;\n\n        if (!tex.valid)\n        {\n            return;\n        }\n        if (!tex.uvMatrix)\n        {\n            // margin = 0.0, let it bleed a bit, shader code becomes easier\n            // assuming that atlas textures were made with 1-pixel padding\n            tex.uvMatrix = new TextureMatrix(tex, 0.0);\n        }\n        tex.uvMatrix.update();\n\n        this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0.0 : 1.0;\n        this.uniforms.mask = maskSprite.texture;\n        this.uniforms.otherMatrix = SpriteMaskFilter2d.calculateSpriteMatrix(input, this.maskMatrix, maskSprite)\n            .prepend(tex.uvMatrix.mapCoord);\n        this.uniforms.alpha = maskSprite.worldAlpha;\n        this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    static calculateSpriteMatrix(input: RenderTexture, mappedMatrix: Matrix2d, sprite: Sprite): Matrix2d\n    {\n        const proj = (sprite as any).proj as Projection2d;\n\n        const filterArea = (input as any).filterFrame;\n\n        // eslint-disable-next-line max-len\n        const worldTransform = proj && !proj._affine ? proj.world.copyTo2dOr3d(tempMat) : tempMat.copyFrom(sprite.transform.worldTransform);\n        const texture = sprite.texture.orig;\n\n        mappedMatrix.set(input.width, 0, 0, input.height, filterArea.x, filterArea.y);\n        worldTransform.invert();\n        mappedMatrix.setToMult(worldTransform, mappedMatrix);\n        mappedMatrix.scaleAndTranslate(1.0 / texture.width, 1.0 / texture.height,\n            sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n}\n","import { MaskData, MaskSystem } from '@pixi/core';\nimport type { Sprite } from '@pixi/sprite';\nimport { SpriteMaskFilter2d } from './SpriteMaskFilter';\n\nconst oldPushSpriteMask = MaskSystem.prototype.pushSpriteMask;\n\nfunction pushSpriteMaskOverride(maskData: MaskData): void\n{\n    const { maskObject } = maskData;\n    const origFilter = maskData._filters;\n\n    if (!origFilter)\n    {\n        let alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n\n        if (!alphaMaskFilter)\n        {\n            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new SpriteMaskFilter2d(maskObject as Sprite)];\n        }\n        maskData._filters = alphaMaskFilter;\n    }\n    oldPushSpriteMask.call(this, maskData);\n    if (!origFilter)\n    {\n        maskData._filters = null;\n    }\n}\n\nexport function patchSpriteMask()\n{\n    MaskSystem.prototype.pushSpriteMask = pushSpriteMaskOverride;\n}\n","import { extensions } from '@pixi/core';\nimport { TilingSprite2dRenderer } from './tiling/TilingSprite2dRenderer';\n\nexport * from './Matrix2d';\nexport * from './Projection2d';\nexport * from './Container2d';\n\nexport * from './sprites/convert';\nexport * from './sprites/Sprite2d';\nexport * from './sprites/Text2d';\n\nexport * from './tiling/TilingSprite2d';\nexport * from './tiling/TilingSprite2dRenderer';\n\nexport * from './z_masks/MaskHacker';\nexport * from './z_masks/SpriteMaskFilter';\n\nexport * from './mesh/Mesh2d';\n\nextensions.add(TilingSprite2dRenderer);\n","import { IPoint, IPointData, ObservablePoint, Point } from '@pixi/math';\n\nexport class Point3d extends Point\n{\n    // TODO: pixi 6.1.0 global mixin\n    z: number;\n    constructor(x?: number, y?: number, z?: number)\n    {\n        super(x, y);\n        this.z = z;\n    }\n\n    set(x?: number, y?: number, z?: number): this\n    {\n        this.x = x || 0;\n        this.y = (y === undefined) ? this.x : (y || 0);\n        this.z = (y === undefined) ? this.x : (z || 0);\n\n        return this;\n    }\n\n    copyFrom(p: IPointData): this\n    {\n        // TODO: pixi 6.1.0 global mixin\n        this.set(p.x, p.y, (p as any).z || 0);\n\n        return this;\n    }\n\n    copyTo<T extends IPoint>(p: T): T\n    {\n        (p as any).set(this.x, this.y, this.z);\n\n        return p;\n    }\n}\n\nexport class ObservablePoint3d extends ObservablePoint\n{\n    _z = 0;\n\n    get z(): number\n    {\n        return this._z;\n    }\n\n    set z(value: number)\n    {\n        if (this._z !== value)\n        {\n            this._z = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    set(x?: number, y?: number, z?: number): this\n    {\n        const _x = x || 0;\n        const _y = (y === undefined) ? _x : (y || 0);\n        const _z = (y === undefined) ? _x : (z || 0);\n\n        if (this._x !== _x || this._y !== _y || this._z !== _z)\n        {\n            this._x = _x;\n            this._y = _y;\n            this._z = _z;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    copyFrom(p: IPointData): this\n    {\n        // TODO: pixi 6.1.0 global mixin\n        this.set(p.x, p.y, (p as any).z || 0);\n\n        return this;\n    }\n\n    copyTo<T extends IPoint>(p: T): T\n    {\n        (p as any).set(this._x, this._y, this._z);\n\n        return p;\n    }\n}\n","import { IEuler } from './ObservableEuler';\n\nexport class Euler\n{\n    constructor(x?: number, y?: number, z?: number)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this._x = x || 0;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this._y = y || 0;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this._z = z || 0;\n\n        this.quaternion = new Float64Array(4);\n        this.quaternion[3] = 1;\n\n        this.update();\n    }\n\n    _quatUpdateId = -1;\n    _quatDirtyId = 0;\n\n    quaternion: Float64Array;\n\n    _x: number;\n    _y: number;\n    _z: number;\n    _sign = 1;\n\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this._quatDirtyId++;\n        }\n    }\n\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this._quatDirtyId++;\n        }\n    }\n\n    get z(): number\n    {\n        return this._z;\n    }\n\n    set z(value: number)\n    {\n        if (this._z !== value)\n        {\n            this._z = value;\n            this._quatDirtyId++;\n        }\n    }\n\n    get pitch(): number\n    {\n        return this._x;\n    }\n\n    set pitch(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this._quatDirtyId++;\n        }\n    }\n\n    get yaw(): number\n    {\n        return this._y;\n    }\n\n    set yaw(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this._quatDirtyId++;\n        }\n    }\n\n    get roll(): number\n    {\n        return this._z;\n    }\n\n    set roll(value: number)\n    {\n        if (this._z !== value)\n        {\n            this._z = value;\n            this._quatDirtyId++;\n        }\n    }\n\n    set(x?: number, y?: number, z?: number): void\n    {\n        const _x = x || 0;\n        const _y = y || 0;\n        const _z = z || 0;\n\n        if (this._x !== _x || this._y !== _y || this._z !== _z)\n        {\n            this._x = _x;\n            this._y = _y;\n            this._z = _z;\n            this._quatDirtyId++;\n        }\n    }\n\n    copyFrom(euler: IEuler): this\n    {\n        const _x = euler.x;\n        const _y = euler.y;\n        const _z = euler.z;\n\n        if (this._x !== _x || this._y !== _y || this._z !== _z)\n        {\n            this._x = _x;\n            this._y = _y;\n            this._z = _z;\n            this._quatDirtyId++;\n        }\n\n        return this;\n    }\n\n    copyTo(p: IEuler): IEuler\n    {\n        p.set(this._x, this._y, this._z);\n\n        return p;\n    }\n\n    equals(euler: IEuler): boolean\n    {\n        return this._x === euler.x\n            && this._y === euler.y\n            && this._z === euler.z;\n    }\n\n    clone(): Euler\n    {\n        return new Euler(this._x, this._y, this._z);\n    }\n\n    update(): boolean\n    {\n        if (this._quatUpdateId === this._quatDirtyId)\n        {\n            return false;\n        }\n        this._quatUpdateId = this._quatDirtyId;\n\n        const c1 = Math.cos(this._x / 2);\n        const c2 = Math.cos(this._y / 2);\n        const c3 = Math.cos(this._z / 2);\n\n        const s = this._sign;\n        const s1 = s * Math.sin(this._x / 2);\n        const s2 = s * Math.sin(this._y / 2);\n        const s3 = s * Math.sin(this._z / 2);\n\n        const q = this.quaternion;\n\n        q[0] = (s1 * c2 * c3) + (c1 * s2 * s3);\n        q[1] = (c1 * s2 * c3) - (s1 * c2 * s3);\n        q[2] = (c1 * c2 * s3) + (s1 * s2 * c3);\n        q[3] = (c1 * c2 * c3) - (s1 * s2 * s3);\n\n        return true;\n    }\n}\n","import { Euler } from './Euler';\n\nexport type IEuler = Euler | ObservableEuler;\n\n/**\n * The Euler angles, order is YZX. Except for projections (camera.lookEuler), its reversed XZY\n * @class\n * @namespace PIXI.projection\n * @param x pitch\n * @param y yaw\n * @param z roll\n * @constructor\n */\n\nexport class ObservableEuler\n{\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    constructor(public cb: any, public scope: any, x?: number, y?: number, z?: number)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this._x = x || 0;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this._y = y || 0;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this._z = z || 0;\n\n        this.quaternion = new Float64Array(4);\n        this.quaternion[3] = 1;\n\n        this.update();\n    }\n\n    _quatUpdateId = -1;\n    _quatDirtyId = 0;\n\n    quaternion: Float64Array;\n\n    _x: number;\n    _y: number;\n    _z: number;\n    _sign = 1;\n\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this._quatDirtyId++;\n            this.cb.call(this.scope);\n        }\n    }\n\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this._quatDirtyId++;\n            this.cb.call(this.scope);\n        }\n    }\n\n    get z(): number\n    {\n        return this._z;\n    }\n\n    set z(value: number)\n    {\n        if (this._z !== value)\n        {\n            this._z = value;\n            this._quatDirtyId++;\n            this.cb.call(this.scope);\n        }\n    }\n\n    get pitch(): number\n    {\n        return this._x;\n    }\n\n    set pitch(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this._quatDirtyId++;\n            this.cb.call(this.scope);\n        }\n    }\n\n    get yaw(): number\n    {\n        return this._y;\n    }\n\n    set yaw(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this._quatDirtyId++;\n            this.cb.call(this.scope);\n        }\n    }\n\n    get roll(): number\n    {\n        return this._z;\n    }\n\n    set roll(value: number)\n    {\n        if (this._z !== value)\n        {\n            this._z = value;\n            this._quatDirtyId++;\n            this.cb.call(this.scope);\n        }\n    }\n\n    set(x?: number, y?: number, z?: number): this\n    {\n        const _x = x || 0;\n        const _y = y || 0;\n        const _z = z || 0;\n\n        if (this._x !== _x || this._y !== _y || this._z !== _z)\n        {\n            this._x = _x;\n            this._y = _y;\n            this._z = _z;\n            this._quatDirtyId++;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    copyFrom(euler: IEuler): this\n    {\n        const _x = euler.x;\n        const _y = euler.y;\n        const _z = euler.z;\n\n        if (this._x !== _x || this._y !== _y || this._z !== _z)\n        {\n            this._x = _x;\n            this._y = _y;\n            this._z = _z;\n            this._quatDirtyId++;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    copyTo(p: IEuler): IEuler\n    {\n        p.set(this._x, this._y, this._z);\n\n        return p;\n    }\n\n    equals(euler: IEuler): boolean\n    {\n        return this._x === euler.x\n            && this._y === euler.y\n            && this._z === euler.z;\n    }\n\n    clone(): Euler\n    {\n        return new Euler(this._x, this._y, this._z);\n    }\n\n    update(): boolean\n    {\n        if (this._quatUpdateId === this._quatDirtyId)\n        {\n            return false;\n        }\n        this._quatUpdateId = this._quatDirtyId;\n\n        const c1 = Math.cos(this._x / 2);\n        const c2 = Math.cos(this._y / 2);\n        const c3 = Math.cos(this._z / 2);\n\n        const s = this._sign;\n        const s1 = s * Math.sin(this._x / 2);\n        const s2 = s * Math.sin(this._y / 2);\n        const s3 = s * Math.sin(this._z / 2);\n\n        const q = this.quaternion;\n\n        q[0] = (s1 * c2 * c3) + (c1 * s2 * s3);\n        q[1] = (c1 * s2 * c3) - (s1 * c2 * s3);\n        q[2] = (c1 * c2 * s3) + (s1 * s2 * c3);\n        q[3] = (c1 * c2 * c3) - (s1 * s2 * s3);\n\n        return true;\n    }\n}\n","/* eslint-disable no-mixed-operators,max-statements-per-line */\n// according to https://jsperf.com/obj-vs-array-view-access/1 , Float64Array is the best here\n\nimport { IPointData, Matrix, Point } from '@pixi/math';\nimport { Matrix2d } from '../proj2d';\nimport { Point3d } from './Point3d';\nimport { AFFINE } from '../base';\n\nconst mat4id = [1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1];\n\nexport class Matrix3d\n{\n    /**\n     * A default (identity) matrix\n     *\n     * @static\n     * @const\n     */\n    static readonly IDENTITY = new Matrix3d();\n\n    /**\n     * A temp matrix\n     *\n     * @static\n     * @const\n     */\n    static readonly TEMP_MATRIX = new Matrix3d();\n\n    /**\n     * mat4 implementation through array of 16 elements\n     */\n    mat4: Float64Array;\n\n    floatArray: Float32Array = null;\n\n    _dirtyId = 0;\n    _updateId = -1;\n    _mat4inv: Float64Array = null;\n    cacheInverse = false;\n\n    constructor(backingArray?: ArrayLike<number>)\n    {\n        this.mat4 = new Float64Array(backingArray || mat4id);\n    }\n\n    get a(): number\n    {\n        return this.mat4[0] / this.mat4[15];\n    }\n\n    set a(value: number)\n    {\n        this.mat4[0] = value * this.mat4[15];\n    }\n\n    get b(): number\n    {\n        return this.mat4[1] / this.mat4[15];\n    }\n\n    set b(value: number)\n    {\n        this.mat4[1] = value * this.mat4[15];\n    }\n\n    get c(): number\n    {\n        return this.mat4[4] / this.mat4[15];\n    }\n\n    set c(value: number)\n    {\n        this.mat4[4] = value * this.mat4[15];\n    }\n\n    get d(): number\n    {\n        return this.mat4[5] / this.mat4[15];\n    }\n\n    set d(value: number)\n    {\n        this.mat4[5] = value * this.mat4[15];\n    }\n\n    get tx(): number\n    {\n        return this.mat4[12] / this.mat4[15];\n    }\n\n    set tx(value: number)\n    {\n        this.mat4[12] = value * this.mat4[15];\n    }\n\n    get ty(): number\n    {\n        return this.mat4[13] / this.mat4[15];\n    }\n\n    set ty(value: number)\n    {\n        this.mat4[13] = value * this.mat4[15];\n    }\n\n    set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        const mat4 = this.mat4;\n\n        mat4[0] = a;\n        mat4[1] = b;\n        mat4[2] = 0;\n        mat4[3] = 0;\n        mat4[4] = c;\n        mat4[5] = d;\n        mat4[6] = 0;\n        mat4[7] = 0;\n        mat4[8] = 0;\n        mat4[9] = 0;\n        mat4[10] = 1;\n        mat4[11] = 0;\n        mat4[12] = tx;\n        mat4[13] = ty;\n        mat4[14] = 0;\n        mat4[15] = 1;\n\n        return this;\n    }\n\n    toArray(transpose?: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.floatArray)\n        {\n            this.floatArray = new Float32Array(9);\n        }\n\n        const array = out || this.floatArray;\n        const mat3 = this.mat4;\n\n        if (transpose)\n        {\n            array[0] = mat3[0];\n            array[1] = mat3[1];\n            array[2] = mat3[3];\n            array[3] = mat3[4];\n            array[4] = mat3[5];\n            array[5] = mat3[7];\n            array[6] = mat3[12];\n            array[7] = mat3[13];\n            array[8] = mat3[15];\n        }\n        else\n        {\n            // this branch is NEVER USED in pixi\n            array[0] = mat3[0];\n            array[1] = mat3[4];\n            array[2] = mat3[12];\n            array[3] = mat3[2];\n            array[4] = mat3[6];\n            array[5] = mat3[13];\n            array[6] = mat3[3];\n            array[7] = mat3[7];\n            array[8] = mat3[15];\n        }\n\n        return array;\n    }\n\n    setToTranslation(tx: number, ty: number, tz: number): void\n    {\n        const mat4 = this.mat4;\n\n        mat4[0] = 1;\n        mat4[1] = 0;\n        mat4[2] = 0;\n        mat4[3] = 0;\n\n        mat4[4] = 0;\n        mat4[5] = 1;\n        mat4[6] = 0;\n        mat4[7] = 0;\n\n        mat4[8] = 0;\n        mat4[9] = 0;\n        mat4[10] = 1;\n        mat4[11] = 0;\n\n        mat4[12] = tx;\n        mat4[13] = ty;\n        mat4[14] = tz;\n        mat4[15] = 1;\n    }\n\n    // eslint-disable-next-line max-len\n    setToRotationTranslationScale(quat: Float64Array, tx: number, ty: number, tz: number, sx: number, sy: number, sz: number): Float64Array\n    {\n        const out = this.mat4;\n\n        const x = quat[0]; const y = quat[1]; const z = quat[2]; const\n            w = quat[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        out[0] = (1 - (yy + zz)) * sx;\n        out[1] = (xy + wz) * sx;\n        out[2] = (xz - wy) * sx;\n        out[3] = 0;\n        out[4] = (xy - wz) * sy;\n        out[5] = (1 - (xx + zz)) * sy;\n        out[6] = (yz + wx) * sy;\n        out[7] = 0;\n        out[8] = (xz + wy) * sz;\n        out[9] = (yz - wx) * sz;\n        out[10] = (1 - (xx + yy)) * sz;\n        out[11] = 0;\n        out[12] = tx;\n        out[13] = ty;\n        out[14] = tz;\n        out[15] = 1;\n\n        return out;\n    }\n\n    apply(pos: IPointData, newPos: IPointData): IPointData\n    {\n        newPos = newPos || new Point3d();\n\n        const mat4 = this.mat4;\n        const x = pos.x;\n        const y = pos.y;\n        // TODO: pixi 6.1.0 global mixin\n        const z = (pos as any).z || 0;\n\n        // TODO: apply for 2d point\n\n        const w = 1.0 / (mat4[3] * x + mat4[7] * y + mat4[11] * z + mat4[15]);\n\n        newPos.x = w * (mat4[0] * x + mat4[4] * y + mat4[8] * z + mat4[12]);\n        newPos.y = w * (mat4[1] * x + mat4[5] * y + mat4[9] * z + mat4[13]);\n        // TODO: pixi 6.1.0 global mixin\n        (newPos as any).z = w * (mat4[2] * x + mat4[6] * y + mat4[10] * z + mat4[14]);\n\n        return newPos;\n    }\n\n    translate(tx: number, ty: number, tz: number): this\n    {\n        const a = this.mat4;\n\n        a[12] = a[0] * tx + a[4] * ty + a[8] * tz + a[12];\n        a[13] = a[1] * tx + a[5] * ty + a[9] * tz + a[13];\n        a[14] = a[2] * tx + a[6] * ty + a[10] * tz + a[14];\n        a[15] = a[3] * tx + a[7] * ty + a[11] * tz + a[15];\n\n        return this;\n    }\n\n    scale(x: number, y: number, z?: number): this\n    {\n        const mat4 = this.mat4;\n\n        mat4[0] *= x;\n        mat4[1] *= x;\n        mat4[2] *= x;\n        mat4[3] *= x;\n\n        mat4[4] *= y;\n        mat4[5] *= y;\n        mat4[6] *= y;\n        mat4[7] *= y;\n\n        if (z !== undefined)\n        {\n            mat4[8] *= z;\n            mat4[9] *= z;\n            mat4[10] *= z;\n            mat4[11] *= z;\n        }\n\n        return this;\n    }\n\n    scaleAndTranslate(scaleX: number, scaleY: number, scaleZ: number, tx: number, ty: number, tz: number): void\n    {\n        const mat4 = this.mat4;\n\n        mat4[0] = scaleX * mat4[0] + tx * mat4[3];\n        mat4[1] = scaleY * mat4[1] + ty * mat4[3];\n        mat4[2] = scaleZ * mat4[2] + tz * mat4[3];\n\n        mat4[4] = scaleX * mat4[4] + tx * mat4[7];\n        mat4[5] = scaleY * mat4[5] + ty * mat4[7];\n        mat4[6] = scaleZ * mat4[6] + tz * mat4[7];\n\n        mat4[8] = scaleX * mat4[8] + tx * mat4[11];\n        mat4[9] = scaleY * mat4[9] + ty * mat4[11];\n        mat4[10] = scaleZ * mat4[10] + tz * mat4[11];\n\n        mat4[12] = scaleX * mat4[12] + tx * mat4[15];\n        mat4[13] = scaleY * mat4[13] + ty * mat4[15];\n        mat4[14] = scaleZ * mat4[14] + tz * mat4[15];\n    }\n\n    // TODO: remove props\n    applyInverse<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point3d()) as any;\n        if (!this._mat4inv)\n        {\n            this._mat4inv = new Float64Array(16);\n        }\n\n        const mat4 = this._mat4inv;\n        const a = this.mat4;\n        const x = pos.x;\n        const y = pos.y;\n        // TODO: pixi 6.1.0 global mixin\n        let z = (pos as any).z || 0;\n\n        if (!this.cacheInverse || this._updateId !== this._dirtyId)\n        {\n            this._updateId = this._dirtyId;\n            Matrix3d.glMatrixMat4Invert(mat4, a);\n        }\n\n        const w1 = 1.0 / (mat4[3] * x + mat4[7] * y + mat4[11] * z + mat4[15]);\n        const x1 = w1 * (mat4[0] * x + mat4[4] * y + mat4[8] * z + mat4[12]);\n        const y1 = w1 * (mat4[1] * x + mat4[5] * y + mat4[9] * z + mat4[13]);\n        const z1 = w1 * (mat4[2] * x + mat4[6] * y + mat4[10] * z + mat4[14]);\n\n        z += 1.0;\n\n        const w2 = 1.0 / (mat4[3] * x + mat4[7] * y + mat4[11] * z + mat4[15]);\n        const x2 = w2 * (mat4[0] * x + mat4[4] * y + mat4[8] * z + mat4[12]);\n        const y2 = w2 * (mat4[1] * x + mat4[5] * y + mat4[9] * z + mat4[13]);\n        const z2 = w2 * (mat4[2] * x + mat4[6] * y + mat4[10] * z + mat4[14]);\n\n        if (Math.abs(z1 - z2) < 1e-10)\n        {\n            (newPos as any).set(NaN, NaN, 0);\n        }\n\n        const alpha = (0 - z1) / (z2 - z1);\n\n        (newPos as any).set((x2 - x1) * alpha + x1, (y2 - y1) * alpha + y1, 0.0);\n\n        return newPos;\n    }\n\n    invert(): Matrix3d\n    {\n        Matrix3d.glMatrixMat4Invert(this.mat4, this.mat4);\n\n        return this;\n    }\n\n    invertCopyTo(matrix: Matrix3d): void\n    {\n        if (!this._mat4inv)\n        {\n            this._mat4inv = new Float64Array(16);\n        }\n\n        const mat4 = this._mat4inv;\n        const a = this.mat4;\n\n        if (!this.cacheInverse || this._updateId !== this._dirtyId)\n        {\n            this._updateId = this._dirtyId;\n            Matrix3d.glMatrixMat4Invert(mat4, a);\n        }\n\n        matrix.mat4.set(mat4);\n    }\n\n    identity(): Matrix3d\n    {\n        const mat3 = this.mat4;\n\n        mat3[0] = 1;\n        mat3[1] = 0;\n        mat3[2] = 0;\n        mat3[3] = 0;\n\n        mat3[4] = 0;\n        mat3[5] = 1;\n        mat3[6] = 0;\n        mat3[7] = 0;\n\n        mat3[8] = 0;\n        mat3[9] = 0;\n        mat3[10] = 1;\n        mat3[11] = 0;\n\n        mat3[12] = 0;\n        mat3[13] = 0;\n        mat3[14] = 0;\n        mat3[15] = 1;\n\n        return this;\n    }\n\n    clone(): Matrix3d\n    {\n        return new Matrix3d(this.mat4);\n    }\n\n    copyTo3d(matrix: Matrix3d): Matrix3d\n    {\n        const mat3 = this.mat4;\n        const ar2 = matrix.mat4;\n\n        ar2[0] = mat3[0];\n        ar2[1] = mat3[1];\n        ar2[2] = mat3[2];\n        ar2[3] = mat3[3];\n        ar2[4] = mat3[4];\n        ar2[5] = mat3[5];\n        ar2[6] = mat3[6];\n        ar2[7] = mat3[7];\n        ar2[8] = mat3[8];\n\n        return matrix;\n    }\n\n    copyTo2d(matrix: Matrix2d): Matrix2d\n    {\n        const mat3 = this.mat4;\n        const ar2 = matrix.mat3;\n\n        ar2[0] = mat3[0];\n        ar2[1] = mat3[1];\n        ar2[2] = mat3[3];\n        ar2[3] = mat3[4];\n        ar2[4] = mat3[5];\n        ar2[5] = mat3[7];\n        ar2[6] = mat3[12];\n        ar2[7] = mat3[13];\n        ar2[8] = mat3[15];\n\n        return matrix;\n    }\n\n    copyTo2dOr3d<P extends Matrix2d | Matrix3d>(matrix: P): P\n    {\n        if (matrix instanceof Matrix2d)\n        {\n            return this.copyTo2d(matrix) as any;\n        }\n\n        return this.copyTo3d(matrix as any) as any;\n    }\n\n    /**\n     * legacy method, change the values of given pixi matrix\n     * @param matrix\n     * @param affine\n     * @param preserveOrientation\n     * @return matrix\n     */\n    copyTo(matrix: Matrix, affine?: AFFINE, preserveOrientation?: boolean): Matrix\n    {\n        const mat3 = this.mat4;\n        const d = 1.0 / mat3[15];\n        const tx = mat3[12] * d; const\n            ty = mat3[13] * d;\n\n        matrix.a = (mat3[0] - mat3[3] * tx) * d;\n        matrix.b = (mat3[1] - mat3[3] * ty) * d;\n        matrix.c = (mat3[4] - mat3[7] * tx) * d;\n        matrix.d = (mat3[5] - mat3[7] * ty) * d;\n        matrix.tx = tx;\n        matrix.ty = ty;\n\n        if (affine >= 2)\n        {\n            let D = matrix.a * matrix.d - matrix.b * matrix.c;\n\n            if (!preserveOrientation)\n            {\n                D = Math.abs(D);\n            }\n            if (affine === AFFINE.POINT)\n            {\n                if (D > 0)\n                {\n                    D = 1;\n                }\n                else D = -1;\n                matrix.a = D;\n                matrix.b = 0;\n                matrix.c = 0;\n                matrix.d = D;\n            }\n            else if (affine === AFFINE.AXIS_X)\n            {\n                D /= Math.sqrt(matrix.b * matrix.b + matrix.d * matrix.d);\n                matrix.c = 0;\n                matrix.d = D;\n            }\n            else if (affine === AFFINE.AXIS_Y)\n            {\n                D /= Math.sqrt(matrix.a * matrix.a + matrix.c * matrix.c);\n                matrix.a = D;\n                matrix.c = 0;\n            }\n        }\n\n        return matrix;\n    }\n\n    /**\n     * legacy method, change the values of given pixi matrix\n     * @param matrix\n     * @return\n     */\n    copyFrom(matrix: Matrix): this\n    {\n        const mat3 = this.mat4;\n\n        mat3[0] = matrix.a;\n        mat3[1] = matrix.b;\n        mat3[2] = 0;\n        mat3[3] = 0;\n\n        mat3[4] = matrix.c;\n        mat3[5] = matrix.d;\n        mat3[6] = 0;\n        mat3[7] = 0;\n\n        mat3[8] = 0;\n        mat3[9] = 0;\n        mat3[10] = 1;\n        mat3[11] = 0;\n\n        mat3[12] = matrix.tx;\n        mat3[13] = matrix.ty;\n        mat3[14] = 0;\n        mat3[15] = 1;\n\n        this._dirtyId++;\n\n        return this;\n    }\n\n    setToMultLegacy(pt: Matrix, lt: Matrix3d): this\n    {\n        const out = this.mat4;\n        const b = lt.mat4;\n\n        const a00 = pt.a; const a01 = pt.b;\n        const a10 = pt.c; const a11 = pt.d;\n        const a30 = pt.tx; const\n            a31 = pt.ty;\n\n        let b0 = b[0]; let b1 = b[1]; let b2 = b[2]; let\n            b3 = b[3];\n\n        out[0] = b0 * a00 + b1 * a10 + b3 * a30;\n        out[1] = b0 * a01 + b1 * a11 + b3 * a31;\n        out[2] = b2;\n        out[3] = b3;\n\n        b0 = b[4];\n        b1 = b[5];\n        b2 = b[6];\n        b3 = b[7];\n        out[4] = b0 * a00 + b1 * a10 + b3 * a30;\n        out[5] = b0 * a01 + b1 * a11 + b3 * a31;\n        out[6] = b2;\n        out[7] = b3;\n\n        b0 = b[8];\n        b1 = b[9];\n        b2 = b[10];\n        b3 = b[11];\n        out[8] = b0 * a00 + b1 * a10 + b3 * a30;\n        out[9] = b0 * a01 + b1 * a11 + b3 * a31;\n        out[10] = b2;\n        out[11] = b3;\n\n        b0 = b[12];\n        b1 = b[13];\n        b2 = b[14];\n        b3 = b[15];\n        out[12] = b0 * a00 + b1 * a10 + b3 * a30;\n        out[13] = b0 * a01 + b1 * a11 + b3 * a31;\n        out[14] = b2;\n        out[15] = b3;\n\n        this._dirtyId++;\n\n        return this;\n    }\n\n    setToMultLegacy2(pt: Matrix3d, lt: Matrix): this\n    {\n        const out = this.mat4;\n        const a = pt.mat4;\n\n        const a00 = a[0]; const a01 = a[1]; const a02 = a[2]; const\n            a03 = a[3];\n        const a10 = a[4]; const a11 = a[5]; const a12 = a[6]; const\n            a13 = a[7];\n\n        const b00 = lt.a; const b01 = lt.b;\n        const b10 = lt.c; const b11 = lt.d;\n        const b30 = lt.tx; const\n            b31 = lt.ty;\n\n        out[0] = b00 * a00 + b01 * a10;\n        out[1] = b00 * a01 + b01 * a11;\n        out[2] = b00 * a02 + b01 * a12;\n        out[3] = b00 * a03 + b01 * a13;\n\n        out[4] = b10 * a00 + b11 * a10;\n        out[5] = b10 * a01 + b11 * a11;\n        out[6] = b10 * a02 + b11 * a12;\n        out[7] = b10 * a03 + b11 * a13;\n\n        out[8] = a[8];\n        out[9] = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n\n        out[12] = b30 * a00 + b31 * a10 + a[12];\n        out[13] = b30 * a01 + b31 * a11 + a[13];\n        out[14] = b30 * a02 + b31 * a12 + a[14];\n        out[15] = b30 * a03 + b31 * a13 + a[15];\n\n        this._dirtyId++;\n\n        return this;\n    }\n\n    // that's transform multiplication we use\n    setToMult(pt: Matrix3d, lt: Matrix3d): this\n    {\n        Matrix3d.glMatrixMat4Multiply(this.mat4, pt.mat4, lt.mat4);\n\n        this._dirtyId++;\n\n        return this;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    prepend(lt: any): void\n    {\n        if (lt.mat4)\n        {\n            this.setToMult(lt, this);\n        }\n        else\n        {\n            this.setToMultLegacy(lt, this);\n        }\n    }\n\n    static glMatrixMat4Invert(out: Float64Array, a: Float64Array): Float64Array\n    {\n        const a00 = a[0]; const a01 = a[1]; const a02 = a[2]; const\n            a03 = a[3];\n        const a10 = a[4]; const a11 = a[5]; const a12 = a[6]; const\n            a13 = a[7];\n        const a20 = a[8]; const a21 = a[9]; const a22 = a[10]; const\n            a23 = a[11];\n        const a30 = a[12]; const a31 = a[13]; const a32 = a[14]; const\n            a33 = a[15];\n\n        const b00 = a00 * a11 - a01 * a10;\n        const b01 = a00 * a12 - a02 * a10;\n        const b02 = a00 * a13 - a03 * a10;\n        const b03 = a01 * a12 - a02 * a11;\n        const b04 = a01 * a13 - a03 * a11;\n        const b05 = a02 * a13 - a03 * a12;\n        const b06 = a20 * a31 - a21 * a30;\n        const b07 = a20 * a32 - a22 * a30;\n        const b08 = a20 * a33 - a23 * a30;\n        const b09 = a21 * a32 - a22 * a31;\n        const b10 = a21 * a33 - a23 * a31;\n        const b11 = a22 * a33 - a23 * a32;\n\n        // Calculate the determinant\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n        if (!det)\n        {\n            return null;\n        }\n        det = 1.0 / det;\n\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n        return out;\n    }\n\n    static glMatrixMat4Multiply(out: Float64Array, a: Float64Array, b: Float64Array): Float64Array\n    {\n        const a00 = a[0]; const a01 = a[1]; const a02 = a[2]; const\n            a03 = a[3];\n        const a10 = a[4]; const a11 = a[5]; const a12 = a[6]; const\n            a13 = a[7];\n        const a20 = a[8]; const a21 = a[9]; const a22 = a[10]; const\n            a23 = a[11];\n        const a30 = a[12]; const a31 = a[13]; const a32 = a[14]; const\n            a33 = a[15];\n\n        // Cache only the current line of the second matrix\n        let b0 = b[0]; let b1 = b[1]; let b2 = b[2]; let\n            b3 = b[3];\n\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[4];\n        b1 = b[5];\n        b2 = b[6];\n        b3 = b[7];\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[8];\n        b1 = b[9];\n        b2 = b[10];\n        b3 = b[11];\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        b0 = b[12];\n        b1 = b[13];\n        b2 = b[14];\n        b3 = b[15];\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n        return out;\n    }\n}\n","import { LinearProjection } from '../base';\nimport { ObservablePoint3d } from './Point3d';\nimport { Matrix, Transform } from '@pixi/math';\nimport { Matrix3d } from './Matrix3d';\nimport { ObservableEuler } from './ObservableEuler';\n\nconst tempMat = new Matrix3d();\n\nexport class Projection3d extends LinearProjection<Matrix3d>\n{\n    constructor(legacy: Transform, enable?: boolean)\n    {\n        super(legacy, enable);\n        this.local = new Matrix3d();\n        this.world = new Matrix3d();\n\n        this.local.cacheInverse = true;\n        this.world.cacheInverse = true;\n\n        this.position._z = 0;\n        this.scale._z = 1;\n        this.pivot._z = 0;\n    }\n\n    cameraMatrix: Matrix3d = null;\n\n    _cameraMode = false;\n\n    get cameraMode(): boolean\n    {\n        return this._cameraMode;\n    }\n\n    set cameraMode(value: boolean)\n    {\n        if (this._cameraMode === value)\n        {\n            return;\n        }\n        this._cameraMode = value;\n\n        this.euler._sign = this._cameraMode ? -1 : 1;\n        this.euler._quatDirtyId++;\n\n        if (value)\n        {\n            this.cameraMatrix = new Matrix3d();\n        }\n    }\n\n    position = new ObservablePoint3d(this.onChange, this, 0, 0);\n    scale = new ObservablePoint3d(this.onChange, this, 1, 1);\n    euler = new ObservableEuler(this.onChange, this, 0, 0, 0);\n    pivot = new ObservablePoint3d(this.onChange, this, 0, 0);\n\n    onChange(): void\n    {\n        this._projID++;\n    }\n\n    clear(): void\n    {\n        if (this.cameraMatrix)\n        {\n            this.cameraMatrix.identity();\n        }\n        this.position.set(0, 0, 0);\n        this.scale.set(1, 1, 1);\n        this.euler.set(0, 0, 0);\n        this.pivot.set(0, 0, 0);\n        super.clear();\n    }\n\n    updateLocalTransform(lt: Matrix): void\n    {\n        if (this._projID === 0)\n        {\n            this.local.copyFrom(lt);\n\n            return;\n        }\n        const matrix = this.local;\n        const euler = this.euler;\n        const pos = this.position;\n        const scale = this.scale;\n        const pivot = this.pivot;\n\n        euler.update();\n\n        if (!this.cameraMode)\n        {\n            matrix.setToRotationTranslationScale(euler.quaternion, pos._x, pos._y, pos._z, scale._x, scale._y, scale._z);\n            matrix.translate(-pivot._x, -pivot._y, -pivot._z);\n            matrix.setToMultLegacy(lt, matrix);\n\n            return;\n        }\n\n        matrix.setToMultLegacy(lt, this.cameraMatrix);\n        matrix.translate(pivot._x, pivot._y, pivot._z);\n        matrix.scale(1.0 / scale._x, 1.0 / scale._y, 1.0 / scale._z);\n        tempMat.setToRotationTranslationScale(euler.quaternion, 0, 0, 0, 1, 1, 1);\n        matrix.setToMult(matrix, tempMat);\n        matrix.translate(-pos._x, -pos._y, -pos._z);\n\n        this.local._dirtyId++;\n    }\n}\n","/* eslint-disable no-mixed-operators */\nimport { Projection3d } from './Projection3d';\nimport { Container, DisplayObject } from '@pixi/display';\nimport { IPointData, Matrix, Point } from '@pixi/math';\nimport { TRANSFORM_STEP } from '../base';\nimport { IEuler } from './ObservableEuler';\n\nexport function container3dWorldTransform(): Matrix\n{\n    return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n}\n\nexport interface IDisplayObject3d\n{\n    isFrontFace(forceUpdate?: boolean): boolean;\n    getDepth(forceUpdate?: boolean): number;\n    // eslint-disable-next-line max-len\n    toLocal<P extends IPointData = Point>(position: IPointData, from?: DisplayObject, point?: P, skipUpdate?: boolean, step?: TRANSFORM_STEP): P;\n    position3d: IPointData;\n    scale3d: IPointData;\n    euler: IEuler;\n    pivot3d: IPointData;\n}\n\nexport class Container3d extends Container implements IDisplayObject3d\n{\n    constructor()\n    {\n        super();\n        this.proj = new Projection3d(this.transform);\n    }\n\n    proj: Projection3d;\n\n    isFrontFace(forceUpdate = false): boolean\n    {\n        if (forceUpdate)\n        {\n            this._recursivePostUpdateTransform();\n            this.displayObjectUpdateTransform();\n        }\n\n        const mat = this.proj.world.mat4;\n        const dx1 = mat[0] * mat[15] - mat[3] * mat[12];\n        const dy1 = mat[1] * mat[15] - mat[3] * mat[13];\n        const dx2 = mat[4] * mat[15] - mat[7] * mat[12];\n        const dy2 = mat[5] * mat[15] - mat[7] * mat[13];\n\n        return dx1 * dy2 - dx2 * dy1 > 0;\n    }\n\n    /**\n     * returns depth from 0 to 1\n     *\n     * @param {boolean} forceUpdate whether to force matrix updates\n     * @returns {number} depth\n     */\n    getDepth(forceUpdate = false): number\n    {\n        if (forceUpdate)\n        {\n            this._recursivePostUpdateTransform();\n            this.displayObjectUpdateTransform();\n        }\n\n        const mat4 = this.proj.world.mat4;\n\n        return mat4[14] / mat4[15];\n    }\n\n    toLocal<P extends IPointData = Point>(position: IPointData, from?: DisplayObject, point?: P, skipUpdate?: boolean,\n        step = TRANSFORM_STEP.ALL): P\n    {\n        if (from)\n        {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n\n        if (!skipUpdate)\n        {\n            this._recursivePostUpdateTransform();\n        }\n\n        if (step === TRANSFORM_STEP.ALL)\n        {\n            if (!skipUpdate)\n            {\n                this.displayObjectUpdateTransform();\n            }\n            if (this.proj.affine)\n            {\n                return this.transform.worldTransform.applyInverse(position, point) as any;\n            }\n\n            return this.proj.world.applyInverse(position, point) as any;\n        }\n\n        if (this.parent)\n        {\n            point = this.parent.worldTransform.applyInverse(position, point) as any;\n        }\n        else\n        {\n            point.x = position.x;\n            point.y = position.y;\n            // TODO: pixi 6.1.0 global mixin\n            (point as any).z = (position as any).z;\n        }\n        if (step === TRANSFORM_STEP.NONE)\n        {\n            return point;\n        }\n\n        point = this.transform.localTransform.applyInverse(point, point) as any;\n        if (step === TRANSFORM_STEP.PROJ && this.proj.cameraMode)\n        {\n            point = this.proj.cameraMatrix.applyInverse(point, point) as any;\n        }\n\n        return point;\n    }\n\n    get worldTransform(): Matrix\n    {\n        return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n    }\n\n    get position3d(): IPointData\n    {\n        return this.proj.position;\n    }\n    set position3d(value: IPointData)\n    {\n        this.proj.position.copyFrom(value);\n    }\n    get scale3d(): IPointData\n    {\n        return this.proj.scale;\n    }\n    set scale3d(value: IPointData)\n    {\n        this.proj.scale.copyFrom(value);\n    }\n    get euler(): IEuler\n    {\n        return this.proj.euler;\n    }\n    set euler(value: IEuler)\n    {\n        this.proj.euler.copyFrom(value);\n    }\n    get pivot3d(): IPointData\n    {\n        return this.proj.pivot;\n    }\n    set pivot3d(value: IPointData)\n    {\n        this.proj.pivot.copyFrom(value);\n    }\n}\n\nexport const container3dToLocal = Container3d.prototype.toLocal;\nexport const container3dGetDepth = Container3d.prototype.getDepth;\nexport const container3dIsFrontFace = Container3d.prototype.isFrontFace;\n","import { Container3d } from './Container3d';\n\nexport class Camera3d extends Container3d\n{\n    constructor()\n    {\n        super();\n        this.proj.cameraMode = true;\n        this.setPlanes(400, 10, 10000, false);\n    }\n\n    _far = 0;\n    _near = 0;\n    _focus = 0;\n    _orthographic = false;\n\n    get far(): number\n    {\n        return this._far;\n    }\n\n    get near(): number\n    {\n        return this._near;\n    }\n\n    get focus(): number\n    {\n        return this._focus;\n    }\n\n    get ortographic(): boolean\n    {\n        return this._orthographic;\n    }\n\n    setPlanes(focus: number, near = 10, far = 10000, orthographic = false): void\n    {\n        this._focus = focus;\n        this._near = near;\n        this._far = far;\n        this._orthographic = orthographic;\n\n        const proj = this.proj;\n        const mat4 = proj.cameraMatrix.mat4;\n\n        proj._projID++;\n\n        mat4[10] = 1.0 / (far - near);\n        mat4[14] = (focus - near) / (far - near);\n        if (this._orthographic)\n        {\n            mat4[11] = 0;\n        }\n        else\n        {\n            mat4[11] = 1.0 / focus;\n        }\n    }\n}\n","import { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { Geometry, Program, Renderer, State, Texture } from '@pixi/core';\nimport { Projection3d } from '../Projection3d';\nimport { IPointData, Matrix } from '@pixi/math';\nimport { DisplayObject } from '@pixi/display';\nimport { TRANSFORM_STEP } from '../../base';\nimport { container3dGetDepth, container3dIsFrontFace, container3dToLocal } from '../Container3d';\nimport { Euler } from '../Euler';\nimport { Mesh2d } from '../../proj2d';\n\nexport class Mesh3d2d extends Mesh\n{\n    constructor(geometry: Geometry, shader: MeshMaterial, state: State, drawMode?: number)\n    {\n        super(geometry, shader, state, drawMode);\n        this.proj = new Projection3d(this.transform);\n    }\n\n    vertexData2d: Float32Array = null;\n    proj: Projection3d;\n\n    calculateVertices(): void\n    {\n        if (this.proj._affine)\n        {\n            this.vertexData2d = null;\n            super.calculateVertices();\n\n            return;\n        }\n\n        const geometry = this.geometry as any;\n        const vertices = geometry.buffers[0].data;\n        const thisAny = this as any;\n\n        if (geometry.vertexDirtyId === thisAny.vertexDirty && thisAny._transformID === thisAny.transform._worldID)\n        {\n            return;\n        }\n\n        thisAny._transformID = thisAny.transform._worldID;\n\n        if (thisAny.vertexData.length !== vertices.length)\n        {\n            thisAny.vertexData = new Float32Array(vertices.length);\n        }\n        if (!this.vertexData2d || this.vertexData2d.length !== vertices.length * 3 / 2)\n        {\n            this.vertexData2d = new Float32Array(vertices.length * 3);\n        }\n\n        const wt = this.proj.world.mat4;\n\n        const vertexData2d = this.vertexData2d;\n        const vertexData = thisAny.vertexData;\n\n        for (let i = 0; i < vertexData.length / 2; i++)\n        {\n            const x = vertices[(i * 2)];\n            const y = vertices[(i * 2) + 1];\n\n            const xx = (wt[0] * x) + (wt[4] * y) + wt[12];\n            const yy = (wt[1] * x) + (wt[5] * y) + wt[13];\n            const ww = (wt[3] * x) + (wt[7] * y) + wt[15];\n\n            vertexData2d[i * 3] = xx;\n            vertexData2d[(i * 3) + 1] = yy;\n            vertexData2d[(i * 3) + 2] = ww;\n\n            vertexData[(i * 2)] = xx / ww;\n            vertexData[(i * 2) + 1] = yy / ww;\n        }\n\n        thisAny.vertexDirty = geometry.vertexDirtyId;\n    }\n\n    get worldTransform(): Matrix\n    {\n        return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n    }\n\n    toLocal<T extends IPointData>(position: IPointData, from?: DisplayObject,\n        point?: T, skipUpdate?: boolean,\n        step = TRANSFORM_STEP.ALL): T\n    {\n        return container3dToLocal.call(this, position, from, point, skipUpdate, step);\n    }\n\n    isFrontFace(forceUpdate?: boolean): boolean\n    {\n        return container3dIsFrontFace.call(this, forceUpdate);\n    }\n\n    getDepth(forceUpdate?: boolean): boolean\n    {\n        return container3dGetDepth.call(this, forceUpdate);\n    }\n\n    get position3d(): IPointData\n    {\n        return this.proj.position;\n    }\n    set position3d(value: IPointData)\n    {\n        this.proj.position.copyFrom(value);\n    }\n    get scale3d(): IPointData\n    {\n        return this.proj.scale;\n    }\n    set scale3d(value: IPointData)\n    {\n        this.proj.scale.copyFrom(value);\n    }\n    get euler(): Euler\n    {\n        return this.proj.euler;\n    }\n    set euler(value: Euler)\n    {\n        this.proj.euler.copyFrom(value);\n    }\n    get pivot3d(): IPointData\n    {\n        return this.proj.pivot;\n    }\n    set pivot3d(value: IPointData)\n    {\n        this.proj.pivot.copyFrom(value);\n    }\n}\n\n(Mesh3d2d.prototype as any)._renderDefault = Mesh2d.prototype._renderDefault;\n\nexport class SimpleMesh3d2d extends Mesh3d2d\n{\n    constructor(texture: Texture, vertices?: Float32Array, uvs?: Float32Array,\n        indices?: Uint16Array, drawMode?: number)\n    {\n        super(new MeshGeometry(vertices, uvs, indices),\n            new MeshMaterial(texture, {\n                program: Program.from(Mesh2d.defaultVertexShader, Mesh2d.defaultFragmentShader),\n                pluginName: 'batch2d'\n            }),\n            null,\n            drawMode);\n\n        (this.geometry.getBuffer('aVertexPosition') as any).static = false;\n    }\n\n    autoUpdate = true;\n\n    get vertices(): Float32Array\n    {\n        return this.geometry.getBuffer('aVertexPosition').data as Float32Array;\n    }\n    set vertices(value: Float32Array)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    protected _render(renderer?: Renderer): void\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n\n        (super._render as any)(renderer);\n    }\n}\n","import { Sprite } from '@pixi/sprite';\nimport { Renderer, Texture } from '@pixi/core';\nimport { Projection3d } from '../Projection3d';\nimport { IPointData, Matrix } from '@pixi/math';\nimport { DisplayObject } from '@pixi/display';\nimport { TRANSFORM_STEP } from '../../base';\nimport { container3dGetDepth, container3dIsFrontFace, container3dToLocal } from '../Container3d';\nimport { Euler } from '../Euler';\n/**\n * Same as Sprite2d, but\n * 1. uses Matrix3d in proj\n * 2. does not render if at least one vertex is behind camera\n */\nexport class Sprite3d extends Sprite\n{\n    constructor(texture: Texture)\n    {\n        super(texture);\n        this.proj = new Projection3d(this.transform);\n        this.pluginName = 'batch2d';\n    }\n\n    vertexData2d: Float32Array = null;\n    proj: Projection3d;\n    culledByFrustrum = false;\n    trimmedCulledByFrustrum = false;\n\n    calculateVertices(): void\n    {\n        const texture = this._texture;\n\n        if (this.proj._affine)\n        {\n            this.vertexData2d = null;\n            super.calculateVertices();\n\n            return;\n        }\n        if (!this.vertexData2d)\n        {\n            this.vertexData2d = new Float32Array(12);\n        }\n\n        const wid = (this.transform as any)._worldID;\n        const tuid = (texture as any)._updateID;\n        const thisAny = this as any;\n\n        if (thisAny._transformID === wid && this._textureID === tuid)\n        {\n            return;\n        }\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== tuid)\n        {\n            (this as any).uvs = (texture as any)._uvs.uvsFloat32;\n        }\n\n        thisAny._transformID = wid;\n        this._textureID = tuid;\n\n        const wt = this.proj.world.mat4;\n        const vertexData2d = this.vertexData2d;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0: number;\n        let w1: number;\n        let h0: number;\n        let h1: number;\n\n        if (trim)\n        {\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        let culled = false;\n\n        let z;\n\n        vertexData2d[0] = (wt[0] * w1) + (wt[4] * h1) + wt[12];\n        vertexData2d[1] = (wt[1] * w1) + (wt[5] * h1) + wt[13];\n        z = (wt[2] * w1) + (wt[6] * h1) + wt[14];\n        vertexData2d[2] = (wt[3] * w1) + (wt[7] * h1) + wt[15];\n        culled = culled || z < 0;\n\n        vertexData2d[3] = (wt[0] * w0) + (wt[4] * h1) + wt[12];\n        vertexData2d[4] = (wt[1] * w0) + (wt[5] * h1) + wt[13];\n        z = (wt[2] * w0) + (wt[6] * h1) + wt[14];\n        vertexData2d[5] = (wt[3] * w0) + (wt[7] * h1) + wt[15];\n        culled = culled || z < 0;\n\n        vertexData2d[6] = (wt[0] * w0) + (wt[4] * h0) + wt[12];\n        vertexData2d[7] = (wt[1] * w0) + (wt[5] * h0) + wt[13];\n        z = (wt[2] * w0) + (wt[6] * h0) + wt[14];\n        vertexData2d[8] = (wt[3] * w0) + (wt[7] * h0) + wt[15];\n        culled = culled || z < 0;\n\n        vertexData2d[9] = (wt[0] * w1) + (wt[4] * h0) + wt[12];\n        vertexData2d[10] = (wt[1] * w1) + (wt[5] * h0) + wt[13];\n        z = (wt[2] * w1) + (wt[6] * h0) + wt[14];\n        vertexData2d[11] = (wt[3] * w1) + (wt[7] * h0) + wt[15];\n        culled = culled || z < 0;\n\n        this.culledByFrustrum = culled;\n\n        vertexData[0] = vertexData2d[0] / vertexData2d[2];\n        vertexData[1] = vertexData2d[1] / vertexData2d[2];\n\n        vertexData[2] = vertexData2d[3] / vertexData2d[5];\n        vertexData[3] = vertexData2d[4] / vertexData2d[5];\n\n        vertexData[4] = vertexData2d[6] / vertexData2d[8];\n        vertexData[5] = vertexData2d[7] / vertexData2d[8];\n\n        vertexData[6] = vertexData2d[9] / vertexData2d[11];\n        vertexData[7] = vertexData2d[10] / vertexData2d[11];\n    }\n\n    calculateTrimmedVertices(): void\n    {\n        if (this.proj._affine)\n        {\n            super.calculateTrimmedVertices();\n\n            return;\n        }\n\n        const wid = (this.transform as any)._worldID;\n        const tuid = (this._texture as any)._updateID;\n        const thisAny = this as any;\n\n        if (!thisAny.vertexTrimmedData)\n        {\n            thisAny.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (thisAny._transformTrimmedID === wid && this._textureTrimmedID === tuid)\n        {\n            return;\n        }\n\n        thisAny._transformTrimmedID = wid;\n        this._textureTrimmedID = tuid;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = thisAny.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.proj.world.mat4;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        let culled = false;\n\n        let z;\n\n        let w = 1.0 / ((wt[3] * w1) + (wt[7] * h1) + wt[15]);\n\n        vertexData[0] = w * ((wt[0] * w1) + (wt[4] * h1) + wt[12]);\n        vertexData[1] = w * ((wt[1] * w1) + (wt[5] * h1) + wt[13]);\n        z = (wt[2] * w1) + (wt[6] * h1) + wt[14];\n        culled = culled || z < 0;\n\n        w = 1.0 / ((wt[3] * w0) + (wt[7] * h1) + wt[15]);\n        vertexData[2] = w * ((wt[0] * w0) + (wt[4] * h1) + wt[12]);\n        vertexData[3] = w * ((wt[1] * w0) + (wt[5] * h1) + wt[13]);\n        z = (wt[2] * w0) + (wt[6] * h1) + wt[14];\n        culled = culled || z < 0;\n\n        w = 1.0 / ((wt[3] * w0) + (wt[7] * h0) + wt[15]);\n        vertexData[4] = w * ((wt[0] * w0) + (wt[4] * h0) + wt[12]);\n        vertexData[5] = w * ((wt[1] * w0) + (wt[5] * h0) + wt[13]);\n        z = (wt[2] * w0) + (wt[6] * h0) + wt[14];\n        culled = culled || z < 0;\n\n        w = 1.0 / ((wt[3] * w1) + (wt[7] * h0) + wt[15]);\n        vertexData[6] = w * ((wt[0] * w1) + (wt[4] * h0) + wt[12]);\n        vertexData[7] = w * ((wt[1] * w1) + (wt[5] * h0) + wt[13]);\n        z = (wt[2] * w1) + (wt[6] * h0) + wt[14];\n        culled = culled || z < 0;\n\n        this.culledByFrustrum = culled;\n    }\n\n    _calculateBounds(): void\n    {\n        this.calculateVertices();\n        if (this.culledByFrustrum)\n        {\n            return;\n        }\n\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this._bounds.addQuad(this.vertexData);\n\n            return;\n        }\n\n        this.calculateTrimmedVertices();\n        if (!this.trimmedCulledByFrustrum)\n        {\n            this._bounds.addQuad((this as any).vertexTrimmedData as any);\n        }\n    }\n\n    _render(renderer: Renderer): void\n    {\n        this.calculateVertices();\n\n        if (this.culledByFrustrum)\n        {\n            return;\n        }\n\n        renderer.batch.setObjectRenderer((renderer as any).plugins[this.pluginName]);\n        (renderer as any).plugins[this.pluginName].render(this);\n    }\n\n    containsPoint(point: IPointData): boolean\n    {\n        if (this.culledByFrustrum)\n        {\n            return false;\n        }\n\n        return super.containsPoint(point as any);\n    }\n\n    get worldTransform(): Matrix\n    {\n        return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n    }\n\n    toLocal<T extends IPointData>(position: IPointData, from?: DisplayObject,\n        point?: T, skipUpdate?: boolean,\n        step = TRANSFORM_STEP.ALL): T\n    {\n        return container3dToLocal.call(this, position, from, point, skipUpdate, step);\n    }\n\n    isFrontFace(forceUpdate?: boolean): boolean\n    {\n        return container3dIsFrontFace.call(this, forceUpdate);\n    }\n\n    getDepth(forceUpdate?: boolean): boolean\n    {\n        return container3dGetDepth.call(this, forceUpdate);\n    }\n\n    get position3d(): IPointData\n    {\n        return this.proj.position;\n    }\n    set position3d(value: IPointData)\n    {\n        this.proj.position.copyFrom(value);\n    }\n    get scale3d(): IPointData\n    {\n        return this.proj.scale;\n    }\n    set scale3d(value: IPointData)\n    {\n        this.proj.scale.copyFrom(value);\n    }\n    get euler(): Euler\n    {\n        return this.proj.euler;\n    }\n    set euler(value: Euler)\n    {\n        this.proj.euler.copyFrom(value);\n    }\n    get pivot3d(): IPointData\n    {\n        return this.proj.pivot;\n    }\n    set pivot3d(value: IPointData)\n    {\n        this.proj.pivot.copyFrom(value);\n    }\n}\n","import { Container3d, container3dWorldTransform } from '../Container3d';\nimport { Projection3d } from '../Projection3d';\nimport { Mesh3d2d } from '../mesh/Mesh3d2d';\nimport { MeshMaterial } from '@pixi/mesh';\nimport { Mesh2d } from '../../proj2d';\nimport { Program } from '@pixi/core';\nimport { SimpleMesh, SimpleRope } from '@pixi/mesh-extras';\nimport { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { Sprite3d } from './Sprite3d';\n\nconst containerProps: any = {\n    worldTransform: {\n        get: container3dWorldTransform,\n        enumerable: true,\n        configurable: true\n    },\n    position3d: {\n        get() { return this.proj.position; },\n        set(value: any) { this.proj.position.copy(value); }\n    },\n    scale3d: {\n        get() { return this.proj.scale; },\n        set(value: any) { this.proj.scale.copy(value); }\n    },\n    pivot3d: {\n        get() { return this.proj.pivot; },\n        set(value: any) { this.proj.pivot.copy(value); }\n    },\n    euler: {\n        get() { return this.proj.euler; },\n        set(value: any) { this.proj.euler.copy(value); }\n    }\n};\n\nfunction convertTo3d()\n{\n    if (this.proj) return;\n    this.proj = new Projection3d(this.transform);\n    this.toLocal = Container3d.prototype.toLocal;\n    this.isFrontFace = Container3d.prototype.isFrontFace;\n    this.getDepth = Container3d.prototype.getDepth;\n    Object.defineProperties(this, containerProps);\n}\n\nContainer.prototype.convertTo3d = convertTo3d;\n\nSprite.prototype.convertTo3d = function spriteConvertTo3d()\n{\n    if (this.proj) return;\n    this.calculateVertices = Sprite3d.prototype.calculateVertices;\n    this.calculateTrimmedVertices = Sprite3d.prototype.calculateTrimmedVertices;\n    this._calculateBounds = Sprite3d.prototype._calculateBounds;\n    this.containsPoint = Sprite3d.prototype.containsPoint;\n    this.pluginName = 'batch2d';\n    convertTo3d.call(this);\n};\n\nContainer.prototype.convertSubtreeTo3d = function convertSubtreeTo3d()\n{\n    this.convertTo3d();\n    for (let i = 0; i < this.children.length; i++)\n    {\n        this.children[i].convertSubtreeTo3d();\n    }\n};\n\nSimpleMesh.prototype.convertTo3d\n    = SimpleRope.prototype.convertTo3d\n    = function meshConvert3d()\n        {\n            if (this.proj) return;\n            this.calculateVertices = Mesh3d2d.prototype.calculateVertices;\n            this._renderDefault = (Mesh3d2d.prototype as any)._renderDefault;\n            if (this.material.pluginName !== 'batch2d')\n            {\n                this.material = new MeshMaterial(this.material.texture, {\n                    program: Program.from(Mesh2d.defaultVertexShader, Mesh2d.defaultFragmentShader),\n                    pluginName: 'batch2d'\n                });\n            }\n            convertTo3d.call(this);\n        };\n","import { Text, TextStyle } from '@pixi/text';\nimport { Projection3d } from '../Projection3d';\nimport { IPointData, Matrix } from '@pixi/math';\nimport { container3dGetDepth, container3dIsFrontFace, container3dToLocal } from '../Container3d';\nimport { DisplayObject } from '@pixi/display';\nimport { TRANSFORM_STEP } from '../../base';\nimport { Sprite3d } from './Sprite3d';\nimport { Euler } from '../Euler';\n\nexport class Text3d extends Text\n{\n    constructor(text?: string, style?: TextStyle, canvas?: HTMLCanvasElement)\n    {\n        super(text, style, canvas);\n        this.proj = new Projection3d(this.transform);\n        this.pluginName = 'batch2d';\n    }\n\n    proj: Projection3d;\n    vertexData2d: Float32Array = null;\n\n    get worldTransform(): Matrix\n    {\n        return this.proj.affine ? this.transform.worldTransform : this.proj.world as any;\n    }\n\n    toLocal<T extends IPointData>(position: IPointData, from?: DisplayObject,\n        point?: T, skipUpdate?: boolean,\n        step = TRANSFORM_STEP.ALL): T\n    {\n        return container3dToLocal.call(this, position, from, point, skipUpdate, step);\n    }\n\n    isFrontFace(forceUpdate?: boolean): boolean\n    {\n        return container3dIsFrontFace.call(this, forceUpdate);\n    }\n\n    getDepth(forceUpdate?: boolean): boolean\n    {\n        return container3dGetDepth.call(this, forceUpdate);\n    }\n\n    get position3d(): IPointData\n    {\n        return this.proj.position;\n    }\n    set position3d(value: IPointData)\n    {\n        this.proj.position.copyFrom(value);\n    }\n    get scale3d(): IPointData\n    {\n        return this.proj.scale;\n    }\n    set scale3d(value: IPointData)\n    {\n        this.proj.scale.copyFrom(value);\n    }\n    get euler(): Euler\n    {\n        return this.proj.euler;\n    }\n    set euler(value: Euler)\n    {\n        this.proj.euler.copyFrom(value);\n    }\n    get pivot3d(): IPointData\n    {\n        return this.proj.pivot;\n    }\n    set pivot3d(value: IPointData)\n    {\n        this.proj.pivot.copyFrom(value);\n    }\n}\n\nText3d.prototype.calculateVertices = Sprite3d.prototype.calculateVertices;\n(Text3d.prototype as any).calculateTrimmedVertices = Sprite3d.prototype.calculateTrimmedVertices;\n(Text3d.prototype as any)._calculateBounds = Sprite3d.prototype._calculateBounds;\nText3d.prototype.containsPoint = Sprite3d.prototype.containsPoint;\n(Text3d.prototype as any)._render = Sprite3d.prototype._render;\n","import { BatchShaderGenerator, Buffer, Color, ExtensionType, Geometry, Renderer, ViewableBuffer } from '@pixi/core';\nimport { TYPES } from '@pixi/constants';\nimport { Sprite } from '@pixi/sprite';\nimport { Sprite2s } from './sprites/Sprite2s';\nimport { Matrix } from '@pixi/math';\nimport { UniformBatchRenderer } from '../base';\n\nconst shaderVert = `precision highp float;\nattribute vec2 aVertexPosition;\nattribute vec3 aTrans1;\nattribute vec3 aTrans2;\nattribute vec2 aSamplerSize;\nattribute vec4 aFrame;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\n\nvarying vec2 vertexPosition;\nvarying vec3 vTrans1;\nvarying vec3 vTrans2;\nvarying vec2 vSamplerSize;\nvarying vec4 vFrame;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\ngl_Position.xyw = projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0);\ngl_Position.z = 0.0;\n\nvertexPosition = aVertexPosition;\nvTrans1 = aTrans1;\nvTrans2 = aTrans2;\nvTextureId = aTextureId;\nvColor = aColor;\nvSamplerSize = aSamplerSize;\nvFrame = aFrame;\n}\n`;\n\nconst shaderFrag = `precision highp float;\nvarying vec2 vertexPosition;\nvarying vec3 vTrans1;\nvarying vec3 vTrans2;\nvarying vec2 vSamplerSize;\nvarying vec4 vFrame;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nuniform sampler2D uSamplers[%count%];\nuniform vec4 distortion;\n\nvoid main(void){\nvec2 surface;\nvec2 surface2;\n\nfloat vx = vertexPosition.x;\nfloat vy = vertexPosition.y;\nfloat dx = distortion.x;\nfloat dy = distortion.y;\nfloat revx = distortion.z;\nfloat revy = distortion.w;\n\nif (distortion.x == 0.0) {\nsurface.x = vx;\nsurface.y = vy / (1.0 + dy * vx);\nsurface2 = surface;\n} else\nif (distortion.y == 0.0) {\nsurface.y = vy;\nsurface.x = vx / (1.0 + dx * vy);\nsurface2 = surface;\n} else {\nfloat c = vy * dx - vx * dy;\nfloat b = (c + 1.0) * 0.5;\nfloat b2 = (-c + 1.0) * 0.5;\nfloat d = b * b + vx * dy;\nif (d < -0.00001) {\n    discard;\n}\nd = sqrt(max(d, 0.0));\nsurface.x = (- b + d) * revy;\nsurface2.x = (- b - d) * revy;\nsurface.y = (- b2 + d) * revx;\nsurface2.y = (- b2 - d) * revx;\n}\n\nvec2 uv;\nuv.x = vTrans1.x * surface.x + vTrans1.y * surface.y + vTrans1.z;\nuv.y = vTrans2.x * surface.x + vTrans2.y * surface.y + vTrans2.z;\n\nvec2 pixels = uv * vSamplerSize;\n\nif (pixels.x < vFrame.x || pixels.x > vFrame.z ||\npixels.y < vFrame.y || pixels.y > vFrame.w) {\nuv.x = vTrans1.x * surface2.x + vTrans1.y * surface2.y + vTrans1.z;\nuv.y = vTrans2.x * surface2.x + vTrans2.y * surface2.y + vTrans2.z;\npixels = uv * vSamplerSize;\n\nif (pixels.x < vFrame.x || pixels.x > vFrame.z ||\n   pixels.y < vFrame.y || pixels.y > vFrame.w) {\n   discard;\n}\n}\n\nvec4 edge;\nedge.xy = clamp(pixels - vFrame.xy + 0.5, vec2(0.0, 0.0), vec2(1.0, 1.0));\nedge.zw = clamp(vFrame.zw - pixels + 0.5, vec2(0.0, 0.0), vec2(1.0, 1.0));\n\nfloat alpha = 1.0; //edge.x * edge.y * edge.z * edge.w;\nvec4 rColor = vColor * alpha;\n\nfloat textureId = floor(vTextureId+0.5);\nvec2 vTextureCoord = uv;\nvec4 color;\n%forloop%\ngl_FragColor = color * rColor;\n}`;\n\nexport class BatchBilinearGeometry extends Geometry\n{\n    _buffer: Buffer;\n    _indexBuffer : Buffer;\n\n    constructor(_static = false)\n    {\n        super();\n\n        this._buffer = new Buffer(null, _static, false);\n\n        this._indexBuffer = new Buffer(null, _static, true);\n\n        this.addAttribute('aVertexPosition', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTrans1', this._buffer, 3, false, TYPES.FLOAT)\n            .addAttribute('aTrans2', this._buffer, 3, false, TYPES.FLOAT)\n            .addAttribute('aSamplerSize', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aFrame', this._buffer, 4, false, TYPES.FLOAT)\n            .addAttribute('aColor', this._buffer, 4, true, TYPES.UNSIGNED_BYTE)\n            .addAttribute('aTextureId', this._buffer, 1, true, TYPES.FLOAT)\n            .addIndex(this._indexBuffer);\n    }\n}\n\nexport class BatchBilinearRenderer extends UniformBatchRenderer\n{\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n        this.vertexSize = 16;\n        this.geometryClass = BatchBilinearGeometry;\n    }\n\n    static extension = {\n        name: 'batch_bilinear',\n        type: ExtensionType.RendererPlugin\n    };\n\n    setShaderGenerator()\n    {\n        this.shaderGenerator = new BatchShaderGenerator(\n            shaderVert,\n            shaderFrag\n        );\n    }\n\n    defUniforms = {\n        translationMatrix: new Matrix(),\n        distortion: new Float32Array([0, 0, Infinity, Infinity])\n    };\n    size = 1000;\n    forceMaxTextures = 1;\n\n    getUniforms(sprite: Sprite)\n    {\n        const { proj } = sprite as Sprite2s;\n\n        if (proj.surface !== null)\n        {\n            return proj.uniforms;\n        }\n        if (proj._activeProjection !== null)\n        {\n            return proj._activeProjection.uniforms;\n        }\n\n        return this.defUniforms;\n    }\n\n    // eslint-disable-next-line max-len\n    packInterleavedGeometry(element: any, attributeBuffer: ViewableBuffer, indexBuffer: Uint16Array, aIndex: number, iIndex: number)\n    {\n        const {\n            uint32View,\n            float32View,\n        } = attributeBuffer;\n        const p = aIndex / this.vertexSize;\n        const indices = element.indices;\n        const vertexData = element.vertexData;\n        const tex = element._texture;\n        const frame = tex._frame;\n        const aTrans = element.aTrans;\n        const { _batchLocation, realWidth, realHeight, resolution } = element._texture.baseTexture;\n\n        const alpha = Math.min(element.worldAlpha, 1.0);\n        const argb = Color.shared\n            .setValue(element._tintRGB)\n            .toPremultiplied(alpha);\n\n        for (let i = 0; i < vertexData.length; i += 2)\n        {\n            float32View[aIndex] = vertexData[i];\n            float32View[aIndex + 1] = vertexData[i + 1];\n\n            float32View[aIndex + 2] = aTrans.a;\n            float32View[aIndex + 3] = aTrans.c;\n            float32View[aIndex + 4] = aTrans.tx;\n            float32View[aIndex + 5] = aTrans.b;\n            float32View[aIndex + 6] = aTrans.d;\n            float32View[aIndex + 7] = aTrans.ty;\n\n            float32View[aIndex + 8] = realWidth;\n            float32View[aIndex + 9] = realHeight;\n            float32View[aIndex + 10] = frame.x * resolution;\n            float32View[aIndex + 11] = frame.y * resolution;\n            float32View[aIndex + 12] = (frame.x + frame.width) * resolution;\n            float32View[aIndex + 13] = (frame.y + frame.height) * resolution;\n\n            uint32View[aIndex + 14] = argb;\n            float32View[aIndex + 15] = _batchLocation;\n            aIndex += 16;\n        }\n\n        for (let i = 0; i < indices.length; i++)\n        {\n            indexBuffer[iIndex++] = p + indices[i];\n        }\n    }\n}\n","import { IPointData, Matrix, Point } from '@pixi/math';\nimport { IWorldTransform } from './ProjectionSurface';\nimport { Dict } from '@pixi/utils';\n\nconst p = [new Point(), new Point(), new Point(), new Point()];\nconst a = [0, 0, 0, 0];\n\nexport abstract class Surface implements IWorldTransform\n{\n    surfaceID = 'default';\n\n    _updateID = 0;\n\n    vertexSrc = '';\n    fragmentSrc = '';\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    fillUniforms(uniforms: Dict<any>): void\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    {\n\n    }\n\n    clear(): void\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    {\n\n    }\n\n    /**\n     * made for bilinear, other things will need adjustments, like test if (0) is inside\n     * @param {ArrayLike<number>} v\n     * @param out\n     * @param {Matrix} after\n     */\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    boundsQuad(v: ArrayLike<number>, out: any, after?: Matrix): void\n    {\n        let minX = out[0]; let\n            minY = out[1];\n        let maxX = out[0]; let\n            maxY = out[1];\n\n        for (let i = 2; i < 8; i += 2)\n        {\n            if (minX > out[i]) minX = out[i];\n            if (maxX < out[i]) maxX = out[i];\n            if (minY > out[i + 1]) minY = out[i + 1];\n            if (maxY < out[i + 1]) maxY = out[i + 1];\n        }\n\n        p[0].set(minX, minY);\n        this.apply(p[0], p[0]);\n        p[1].set(maxX, minY);\n        this.apply(p[1], p[1]);\n        p[2].set(maxX, maxY);\n        this.apply(p[2], p[2]);\n        p[3].set(minX, maxY);\n        this.apply(p[3], p[3]);\n\n        if (after)\n        {\n            after.apply(p[0], p[0]);\n            after.apply(p[1], p[1]);\n            after.apply(p[2], p[2]);\n            after.apply(p[3], p[3]);\n            out[0] = p[0].x;\n            out[1] = p[0].y;\n            out[2] = p[1].x;\n            out[3] = p[1].y;\n            out[4] = p[2].x;\n            out[5] = p[2].y;\n            out[6] = p[3].x;\n            out[7] = p[3].y;\n        }\n        else\n        {\n            for (let i = 1; i <= 3; i++)\n            {\n                if (p[i].y < p[0].y || (p[i].y === p[0].y && p[i].x < p[0].x))\n                {\n                    const t = p[0];\n\n                    p[0] = p[i];\n                    p[i] = t;\n                }\n            }\n\n            for (let i = 1; i <= 3; i++)\n            {\n                a[i] = Math.atan2(p[i].y - p[0].y, p[i].x - p[0].x);\n            }\n            for (let i = 1; i <= 3; i++)\n            {\n                for (let j = i + 1; j <= 3; j++)\n                {\n                    if (a[i] > a[j])\n                    {\n                        const t = p[i];\n\n                        p[i] = p[j];\n                        p[j] = t;\n                        const t2 = a[i];\n\n                        a[i] = a[j];\n                        a[j] = t2;\n                    }\n                }\n            }\n\n            out[0] = p[0].x;\n            out[1] = p[0].y;\n            out[2] = p[1].x;\n            out[3] = p[1].y;\n            out[4] = p[2].x;\n            out[5] = p[2].y;\n            out[6] = p[3].x;\n            out[7] = p[3].y;\n\n            if (((p[3].x - p[2].x) * (p[1].y - p[2].y)) - ((p[1].x - p[2].x) * (p[3].y - p[2].y)) < 0)\n            {\n                // triangle!!!\n                out[4] = p[3].x;\n                out[5] = p[3].y;\n\n                return;\n            }\n        }\n    }\n\n    abstract apply(pos: IPointData, newPos: IPointData): IPointData;\n\n    // TODO: remove props\n    abstract applyInverse(pos: IPointData, newPos: IPointData): IPointData;\n}\n","/* eslint-disable no-mixed-operators */\nimport { IPoint, IPointData, Matrix, Point, Rectangle, Transform } from '@pixi/math';\nimport { Sprite } from '@pixi/sprite';\nimport { Surface } from './BaseSurface';\nimport { Dict } from '@pixi/utils';\n\nconst tempMat = new Matrix();\nconst tempRect = new Rectangle();\nconst tempPoint = new Point();\n\nexport class BilinearSurface extends Surface\n{\n    distortion = new Point();\n\n    clear(): void\n    {\n        this.distortion.set(0, 0);\n    }\n\n    apply(pos: IPointData, newPos?: IPointData): IPointData\n    {\n        newPos = newPos || new Point();\n        const d = this.distortion;\n        const m = pos.x * pos.y;\n\n        newPos.x = pos.x + d.x * m;\n        newPos.y = pos.y + d.y * m;\n\n        return newPos;\n    }\n\n    applyInverse(pos: IPointData, newPos: IPoint): IPointData\n    {\n        newPos = newPos || new Point();\n        const vx = pos.x; const\n            vy = pos.y;\n        const dx = this.distortion.x; const\n            dy = this.distortion.y;\n\n        if (dx === 0.0)\n        {\n            newPos.x = vx;\n            newPos.y = vy / (1.0 + dy * vx);\n        }\n        else\n        if (dy === 0.0)\n        {\n            newPos.y = vy;\n            newPos.x = vx / (1.0 + dx * vy);\n        }\n        else\n        {\n            const b = (vy * dx - vx * dy + 1.0) * 0.5 / dy;\n            const d = b * b + vx / dy;\n\n            if (d <= 0.00001)\n            {\n                newPos.set(NaN, NaN);\n\n                return newPos;\n            }\n            if (dy > 0.0)\n            {\n                newPos.x = -b + Math.sqrt(d);\n            }\n            else\n            {\n                newPos.x = -b - Math.sqrt(d);\n            }\n            newPos.y = (vx / newPos.x - 1.0) / dx;\n        }\n\n        return newPos;\n    }\n\n    mapSprite(sprite: Sprite, quad: Array<IPointData>, outTransform?: Transform): this\n    {\n        const tex = sprite.texture;\n\n        tempRect.x = -sprite.anchor.x * tex.orig.width;\n        tempRect.y = -sprite.anchor.y * tex.orig.height;\n        tempRect.width = tex.orig.width;\n        tempRect.height = tex.orig.height;\n\n        return this.mapQuad(tempRect, quad, outTransform || sprite.transform as Transform);\n    }\n\n    mapQuad(rect: Rectangle, quad: Array<IPointData>, outTransform: Transform): this\n    {\n        const ax = -rect.x / rect.width;\n        const ay = -rect.y / rect.height;\n\n        const ax2 = (1.0 - rect.x) / rect.width;\n        const ay2 = (1.0 - rect.y) / rect.height;\n\n        const up1x = (quad[0].x * (1.0 - ax) + quad[1].x * ax);\n        const up1y = (quad[0].y * (1.0 - ax) + quad[1].y * ax);\n        const up2x = (quad[0].x * (1.0 - ax2) + quad[1].x * ax2);\n        const up2y = (quad[0].y * (1.0 - ax2) + quad[1].y * ax2);\n\n        const down1x = (quad[3].x * (1.0 - ax) + quad[2].x * ax);\n        const down1y = (quad[3].y * (1.0 - ax) + quad[2].y * ax);\n        const down2x = (quad[3].x * (1.0 - ax2) + quad[2].x * ax2);\n        const down2y = (quad[3].y * (1.0 - ax2) + quad[2].y * ax2);\n\n        const x00 = up1x * (1.0 - ay) + down1x * ay;\n        const y00 = up1y * (1.0 - ay) + down1y * ay;\n\n        const x10 = up2x * (1.0 - ay) + down2x * ay;\n        const y10 = up2y * (1.0 - ay) + down2y * ay;\n\n        const x01 = up1x * (1.0 - ay2) + down1x * ay2;\n        const y01 = up1y * (1.0 - ay2) + down1y * ay2;\n\n        const x11 = up2x * (1.0 - ay2) + down2x * ay2;\n        const y11 = up2y * (1.0 - ay2) + down2y * ay2;\n\n        const mat = tempMat;\n\n        mat.tx = x00;\n        mat.ty = y00;\n        mat.a = x10 - x00;\n        mat.b = y10 - y00;\n        mat.c = x01 - x00;\n        mat.d = y01 - y00;\n        tempPoint.set(x11, y11);\n        mat.applyInverse(tempPoint, tempPoint);\n        this.distortion.set(tempPoint.x - 1, tempPoint.y - 1);\n\n        outTransform.setFromMatrix(mat);\n\n        return this;\n    }\n\n    fillUniforms(uniforms: Dict<any>): void\n    {\n        uniforms.distortion = uniforms.distortion || new Float32Array([0, 0, 0, 0]);\n        const ax = Math.abs(this.distortion.x);\n        const ay = Math.abs(this.distortion.y);\n\n        uniforms.distortion[0] = ax * 10000 <= ay ? 0 : this.distortion.x;\n        uniforms.distortion[1] = ay * 10000 <= ax ? 0 : this.distortion.y;\n        uniforms.distortion[2] = 1.0 / uniforms.distortion[0];\n        uniforms.distortion[3] = 1.0 / uniforms.distortion[1];\n    }\n}\n","import { IPointData, Transform } from '@pixi/math';\nimport { AbstractProjection } from '../base';\nimport { Surface } from './BaseSurface';\nimport { BilinearSurface } from './BilinearSurface';\nimport { Sprite } from '@pixi/sprite';\n\nconst fun = Transform.prototype.updateTransform;\n\nexport interface IWorldTransform\n{\n    apply(pos: IPointData, newPos: IPointData): IPointData;\n\n    // TODO: remove props\n    applyInverse(pos: IPointData, newPos: IPointData): IPointData;\n}\n\nfunction transformHack(this: Transform, parentTransform: Transform): IWorldTransform\n{\n    // TODO: pixi 6.1.0 global mixin\n    const proj = (this as any).proj as ProjectionSurface;\n\n    const pp = (parentTransform as any).proj as ProjectionSurface;\n    const ta = this as any;\n\n    if (!pp)\n    {\n        fun.call(this, parentTransform);\n        proj._activeProjection = null;\n\n        return;\n    }\n\n    if (pp._surface)\n    {\n        proj._activeProjection = pp;\n        this.updateLocalTransform();\n        this.localTransform.copyTo(this.worldTransform);\n        if (ta._parentID < 0)\n        {\n            ++ta._worldID;\n        }\n\n        return;\n    }\n\n    fun.call(this, parentTransform);\n    proj._activeProjection = pp._activeProjection;\n}\n\nexport class ProjectionSurface extends AbstractProjection\n{\n    _surface: Surface = null;\n    _activeProjection: ProjectionSurface = null;\n\n    // eslint-disable-next-line accessor-pairs\n    set enabled(value: boolean)\n    {\n        if (value === this._enabled)\n        {\n            return;\n        }\n        this._enabled = value;\n        if (value)\n        {\n            this.legacy.updateTransform = transformHack;\n            (this.legacy as any)._parentID = -1;\n        }\n        else\n        {\n            this.legacy.updateTransform = Transform.prototype.updateTransform;\n            (this.legacy as any)._parentID = -1;\n        }\n    }\n\n    get surface(): Surface\n    {\n        return this._surface;\n    }\n\n    set surface(value: Surface)\n    {\n        if (this._surface === value)\n        {\n            return;\n        }\n        this._surface = value || null;\n        (this.legacy as any)._parentID = -1;\n    }\n\n    applyPartial(pos: IPointData, newPos?: IPointData): IPointData\n    {\n        if (this._activeProjection !== null)\n        {\n            newPos = this.legacy.worldTransform.apply(pos, newPos);\n\n            return this._activeProjection.surface.apply(newPos, newPos);\n        }\n        if (this._surface !== null)\n        {\n            return this.surface.apply(pos, newPos);\n        }\n\n        return this.legacy.worldTransform.apply(pos, newPos);\n    }\n\n    apply(pos: IPointData, newPos?: IPointData): IPointData\n    {\n        if (this._activeProjection !== null)\n        {\n            newPos = this.legacy.worldTransform.apply(pos, newPos);\n            this._activeProjection.surface.apply(newPos, newPos);\n\n            return this._activeProjection.legacy.worldTransform.apply(newPos, newPos);\n        }\n        if (this._surface !== null)\n        {\n            newPos = this.surface.apply(pos, newPos);\n\n            return this.legacy.worldTransform.apply(newPos, newPos);\n        }\n\n        return this.legacy.worldTransform.apply(pos, newPos);\n    }\n\n    applyInverse(pos: IPointData, newPos: IPointData): IPointData\n    {\n        if (this._activeProjection !== null)\n        {\n            newPos = this._activeProjection.legacy.worldTransform.applyInverse(pos, newPos);\n            this._activeProjection._surface.applyInverse(newPos, newPos);\n\n            return this.legacy.worldTransform.applyInverse(newPos, newPos);\n        }\n        if (this._surface !== null)\n        {\n            newPos = this.legacy.worldTransform.applyInverse(pos, newPos);\n\n            return this._surface.applyInverse(newPos, newPos);\n        }\n\n        return this.legacy.worldTransform.applyInverse(pos, newPos);\n    }\n\n    mapBilinearSprite(sprite: Sprite, quad: Array<IPointData>): void\n    {\n        if (!(this._surface instanceof BilinearSurface))\n        {\n            this.surface = new BilinearSurface();\n        }\n        (this.surface as BilinearSurface).mapSprite(sprite, quad, this.legacy);\n    }\n\n    _currentSurfaceID = -1;\n    _currentLegacyID = -1;\n    _lastUniforms : any = null;\n\n    clear(): void\n    {\n        if (this.surface)\n        {\n            this.surface.clear();\n        }\n    }\n\n    get uniforms(): any\n    {\n        if (this._currentLegacyID === (this.legacy as any)._worldID\n            && this._currentSurfaceID === this.surface._updateID)\n        {\n            return this._lastUniforms;\n        }\n\n        this._lastUniforms = this._lastUniforms || {};\n        this._lastUniforms.translationMatrix = this.legacy.worldTransform;\n        this._surface.fillUniforms(this._lastUniforms);\n\n        return this._lastUniforms;\n    }\n}\n","import { Matrix } from '@pixi/math';\nimport { Texture, TextureMatrix } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { ProjectionSurface } from '../ProjectionSurface';\n\nexport class Sprite2s extends Sprite\n{\n    constructor(texture: Texture)\n    {\n        super(texture);\n        this.proj = new ProjectionSurface(this.transform);\n        this.pluginName = 'batch_bilinear';\n    }\n\n    proj: ProjectionSurface;\n    aTrans = new Matrix();\n\n    _calculateBounds(): void\n    {\n        this.calculateTrimmedVertices();\n        this._bounds.addQuad((this as any).vertexTrimmedData as any);\n    }\n\n    calculateVertices(): void\n    {\n        const wid = (this.transform as any)._worldID;\n        const tuid = (this._texture as any)._updateID;\n        const thisAny = this as any;\n\n        if (thisAny._transformID === wid && this._textureID === tuid)\n        {\n            return;\n        }\n\n        thisAny._transformID = wid;\n        this._textureID = tuid;\n\n        const texture = this._texture;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0: number;\n        let w1: number;\n        let h0: number;\n        let h1: number;\n\n        if (trim)\n        {\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        if (this.proj._surface)\n        {\n            vertexData[0] = w1;\n            vertexData[1] = h1;\n            vertexData[2] = w0;\n            vertexData[3] = h1;\n            vertexData[4] = w0;\n            vertexData[5] = h0;\n            vertexData[6] = w1;\n            vertexData[7] = h0;\n            this.proj._surface.boundsQuad(vertexData, vertexData);\n        }\n        else\n        {\n            const wt = this.transform.worldTransform;\n            const a = wt.a;\n            const b = wt.b;\n            const c = wt.c;\n            const d = wt.d;\n            const tx = wt.tx;\n            const ty = wt.ty;\n\n            vertexData[0] = (a * w1) + (c * h1) + tx;\n            vertexData[1] = (d * h1) + (b * w1) + ty;\n            vertexData[2] = (a * w0) + (c * h1) + tx;\n            vertexData[3] = (d * h1) + (b * w0) + ty;\n            vertexData[4] = (a * w0) + (c * h0) + tx;\n            vertexData[5] = (d * h0) + (b * w0) + ty;\n            vertexData[6] = (a * w1) + (c * h0) + tx;\n            vertexData[7] = (d * h0) + (b * w1) + ty;\n            if (this.proj._activeProjection)\n            {\n                this.proj._activeProjection.surface.boundsQuad(vertexData, vertexData);\n            }\n        }\n\n        if (!texture.uvMatrix)\n        {\n            texture.uvMatrix = new TextureMatrix(texture);\n        }\n        texture.uvMatrix.update();\n\n        const aTrans = this.aTrans;\n\n        aTrans.set(orig.width, 0, 0, orig.height, w1, h1);\n        if (this.proj._surface === null)\n        {\n            aTrans.prepend(this.transform.worldTransform);\n        }\n        aTrans.invert();\n        aTrans.prepend((texture.uvMatrix as any).mapCoord);\n    }\n\n    calculateTrimmedVertices(): void\n    {\n        const wid = (this.transform as any)._worldID;\n        const tuid = (this._texture as any)._updateID;\n        const thisAny = this as any;\n\n        if (!thisAny.vertexTrimmedData)\n        {\n            thisAny.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (thisAny._transformTrimmedID === wid && this._textureTrimmedID === tuid)\n        {\n            return;\n        }\n\n        thisAny._transformTrimmedID = wid;\n        this._textureTrimmedID = tuid;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = thisAny.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // TODO: take rotations into account! form temporary bounds\n\n        if (this.proj._surface)\n        {\n            vertexData[0] = w1;\n            vertexData[1] = h1;\n            vertexData[2] = w0;\n            vertexData[3] = h1;\n            vertexData[4] = w0;\n            vertexData[5] = h0;\n            vertexData[6] = w1;\n            vertexData[7] = h0;\n            this.proj._surface.boundsQuad(vertexData, vertexData, this.transform.worldTransform);\n        }\n        else\n        {\n            const wt = this.transform.worldTransform;\n            const a = wt.a;\n            const b = wt.b;\n            const c = wt.c;\n            const d = wt.d;\n            const tx = wt.tx;\n            const ty = wt.ty;\n\n            vertexData[0] = (a * w1) + (c * h1) + tx;\n            vertexData[1] = (d * h1) + (b * w1) + ty;\n            vertexData[2] = (a * w0) + (c * h1) + tx;\n            vertexData[3] = (d * h1) + (b * w0) + ty;\n            vertexData[4] = (a * w0) + (c * h0) + tx;\n            vertexData[5] = (d * h0) + (b * w0) + ty;\n            vertexData[6] = (a * w1) + (c * h0) + tx;\n            vertexData[7] = (d * h0) + (b * w1) + ty;\n            if (this.proj._activeProjection)\n            {\n                this.proj._activeProjection.surface.boundsQuad(vertexData, vertexData,\n                    this.proj._activeProjection.legacy.worldTransform);\n            }\n        }\n    }\n\n    get worldTransform(): Matrix\n    {\n        return this.proj as any;\n    }\n}\n","import { Sprite } from '@pixi/sprite';\nimport { Container } from '@pixi/display';\nimport { Matrix } from '@pixi/math';\nimport { Sprite2s } from './Sprite2s';\nimport { ProjectionSurface } from '../ProjectionSurface';\n\nSprite.prototype.convertTo2s = function spriteConvertTo2s()\n{\n    if (this.proj) return;\n    // container\n    this.pluginName = 'sprite_bilinear';\n    this.aTrans = new Matrix();\n    this.calculateVertices = Sprite2s.prototype.calculateVertices;\n    this.calculateTrimmedVertices = Sprite2s.prototype.calculateTrimmedVertices;\n    this._calculateBounds = Sprite2s.prototype._calculateBounds;\n    Container.prototype.convertTo2s.call(this);\n};\n\nContainer.prototype.convertTo2s = function convertTo2s()\n{\n    if (this.proj) return;\n    this.proj = new ProjectionSurface(this.transform);\n    Object.defineProperty(this, 'worldTransform', {\n        get()\n        {\n            return this.proj;\n        },\n        enumerable: true,\n        configurable: true\n    });\n};\n\nContainer.prototype.convertSubtreeTo2s = function convertSubtreeTo2s()\n{\n    this.convertTo2s();\n    for (let i = 0; i < this.children.length; i++)\n    {\n        this.children[i].convertSubtreeTo2s();\n    }\n};\n","import { Text, TextStyle } from '@pixi/text';\nimport { ProjectionSurface } from '../ProjectionSurface';\nimport { Matrix } from '@pixi/math';\nimport { Sprite2s } from './Sprite2s';\n\nexport class Text2s extends Text\n{\n    constructor(text?: string, style?: TextStyle, canvas?: HTMLCanvasElement)\n    {\n        super(text, style, canvas);\n        this.proj = new ProjectionSurface(this.transform);\n        this.pluginName = 'batch_bilinear';\n    }\n\n    proj: ProjectionSurface;\n\n    aTrans = new Matrix();\n\n    get worldTransform(): Matrix\n    {\n        return this.proj as any;\n    }\n}\n\n(Text2s.prototype as any).calculateVertices = Sprite2s.prototype.calculateVertices;\n(Text2s.prototype as any).calculateTrimmedVertices = Sprite2s.prototype.calculateTrimmedVertices;\n(Text2s.prototype as any)._calculateBounds = Sprite2s.prototype._calculateBounds;\n","import { extensions } from '@pixi/core';\nimport { BatchBilinearRenderer } from './SpriteBilinearRenderer';\n\nexport * from './BaseSurface';\nexport * from './BilinearSurface';\nexport * from './ProjectionSurface';\nexport * from './SpriteBilinearRenderer';\n\nexport * from './sprites/convert';\nexport * from './sprites/Sprite2s';\nexport * from './sprites/Text2s';\n\nextensions.add(BatchBilinearRenderer);\n","import { ISpineClass } from './base';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite2d, Container2d, SimpleMesh2d } from '../proj2d';\nimport { Texture } from '@pixi/core';\n\nexport function applySpine2dMixin(spineClassPrototype: ISpineClass): void\n{\n    spineClassPrototype.newMesh = function newMesh(texture: Texture, vertices?: Float32Array,\n        uvs?: Float32Array, indices?: Uint16Array, drawMode?: number)\n    {\n        return new SimpleMesh2d(texture, vertices, uvs, indices, drawMode) as any;\n    };\n    spineClassPrototype.newContainer = function newMesh()\n    {\n        if (!this.proj)\n        {\n            this.convertTo2d();\n        }\n\n        return new Container2d() as any;\n    };\n    spineClassPrototype.newSprite = function newSprite(texture: Texture)\n    {\n        return new Sprite2d(texture);\n    };\n    spineClassPrototype.newGraphics = function newMesh()\n    {\n        const graphics = new Graphics();\n        // TODO: make Graphics2d\n\n        graphics.convertTo2d();\n\n        return graphics;\n    };\n    spineClassPrototype.transformHack = function transformHack()\n    {\n        return 2;\n    };\n}\n","import { ISpineClass } from './base';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite3d, Container3d, SimpleMesh3d2d } from '../proj3d';\nimport { Texture } from '@pixi/core';\n\nexport function applySpine3dMixin(spineClassPrototype: ISpineClass): void\n{\n    spineClassPrototype.newMesh = function newMesh(texture: Texture, vertices?: Float32Array,\n        uvs?: Float32Array, indices?: Uint16Array, drawMode?: number)\n    {\n        return new SimpleMesh3d2d(texture, vertices, uvs, indices, drawMode) as any;\n    };\n    spineClassPrototype.newContainer = function newMesh()\n    {\n        if (!this.proj)\n        {\n            this.convertTo3d();\n        }\n\n        return new Container3d() as any;\n    };\n    spineClassPrototype.newSprite = function newSprite(texture: Texture)\n    {\n        return new Sprite3d(texture);\n    };\n    spineClassPrototype.newGraphics = function newMesh()\n    {\n        const graphics = new Graphics();\n        // TODO: make Graphics2d\n\n        graphics.convertTo3d();\n\n        return graphics;\n    };\n    spineClassPrototype.transformHack = function transformHack()\n    {\n        return 2;\n    };\n}\n"],"names":["ENV","ENV2","RENDERER_TYPE","RENDERER_TYPE2","BUFFER_BITS","BUFFER_BITS2","BLEND_MODES","BLEND_MODES2","DRAW_MODES","DRAW_MODES2","FORMATS","FORMATS2","TARGETS","TARGETS2","TYPES","TYPES2","SAMPLER_TYPES","SAMPLER_TYPES2","SCALE_MODES","SCALE_MODES2","WRAP_MODES","WRAP_MODES2","MIPMAP_MODES","MIPMAP_MODES2","ALPHA_MODES","ALPHA_MODES2","CLEAR_MODES","CLEAR_MODES2","GC_MODES","GC_MODES2","PRECISION","PRECISION2","MASK_TYPES","MASK_TYPES2","COLOR_MASK_BITS","COLOR_MASK_BITS2","MSAA_QUALITY","MSAA_QUALITY2","BUFFER_TYPE","BUFFER_TYPE2","_","y","a","e","i","f","shaderVert","shaderFrag","Batch3dGeometry","Geometry","_static","__publicField","Buffer","Batch2dRenderer","BatchRenderer","renderer","BatchShaderGenerator","element","attributeBuffer","indexBuffer","aIndex","iIndex","uint32View","float32View","p","uvs","indices","vertexData","vertexData2d","textureId","alpha","argb","Color","j","ExtensionType","n","s","t","r","o","AbstractProjection","legacy","enable","value","TRANSFORM_STEP","l","AFFINE","transformHack","parentTransform","proj","ta","pwid","lt","scaleAfterAffine","_matrixID","pp","wa","LinearProjection","Transform","U","A","d","UniformBatchRenderer","sprite","obj","sh","key","texArray","start","finish","thisAny","elements","_attributeBuffer","_indexBuffer","vertexSize","drawCalls","dcIndex","drawCall","tex","spriteBlendMode","premultiplyBlendMode","uniforms","dcCount","gl","stateSystem","shaderSystem","curUniforms","curTexArray","type","size","blend","extensions","getIntersectionFactor","p1","p2","p3","p4","out","A1","B1","C1","A2","B2","C2","D","T","u","getPositionFromQuad","anchor","Point","a1","a2","b1","b2","mat3id","_Matrix2d","backingArray","b","c","tx","ty","mat3","transpose","array","pos","newPos","x","z","scaleX","scaleY","a00","a01","a02","a10","a11","a12","a20","a21","a22","newX","newY","newZ","b01","b11","b21","det","matrix","ar2","affine","preserveOrientation","pt","b00","b02","b10","b12","b20","b22","Matrix2d","shaderSimpleFrag","tempMat","TilingSprite2dRenderer","ObjectRenderer","QuadUv","Shader","ts","quad","vertices","baseTex","uv","isSimple","shader","premultiplyTintToRgba","correctBlendMode","P","t0","tt","tempRect","Rectangle","Projection2d","ObservablePoint","pivot","factor","rect","k1","k2","k3","d0","d1","d2","d3","q0","q1","q2","m","container2dWorldTransform","Container2d","Container","position","from","point","skipUpdate","step","container2dToLocal","Mesh2d","Mesh","geometry","state","drawMode","wt","xx","yy","ww","_a","SimpleMesh2d","texture","MeshGeometry","MeshMaterial","Program","w","Sprite2d","Sprite","wid","tuid","trim","orig","w0","w1","h0","h1","h","tempTransform","TilingSprite2d","TilingSprite","width","height","convertTo2d","SimpleMesh","SimpleRope","Text2d","Text","text","style","canvas","spriteMaskVert","spriteMaskFrag","SpriteMaskFilter2d","Filter","filterManager","input","output","clearMode","maskSprite","TextureMatrix","mappedMatrix","filterArea","worldTransform","oldPushSpriteMask","MaskSystem","pushSpriteMaskOverride","maskData","maskObject","origFilter","alphaMaskFilter","patchSpriteMask","Point3d","ObservablePoint3d","_x","_y","_z","Euler","euler","c1","c2","c3","s1","s2","s3","q","ObservableEuler","cb","scope","R","k","N","mat4id","_Matrix3d","mat4","tz","quat","sx","sy","sz","x2","y2","z2","xy","xz","yz","zz","wx","wy","wz","scaleZ","x1","y1","z1","w2","a30","a31","b0","b3","a03","a13","b30","b31","a23","a32","a33","b03","b04","b05","b06","b07","b08","b09","Matrix3d","Projection3d","scale","container3dWorldTransform","Container3d","forceUpdate","mat","dx1","dy1","dx2","dy2","container3dToLocal","container3dGetDepth","container3dIsFrontFace","Camera3d","focus","near","far","orthographic","Mesh3d2d","SimpleMesh3d2d","Sprite3d","culled","containerProps","convertTo3d","Text3d","BatchBilinearGeometry","BatchBilinearRenderer","Matrix","frame","aTrans","_batchLocation","realWidth","realHeight","resolution","Surface","v","after","minX","minY","maxX","maxY","t2","B","tempPoint","BilinearSurface","vx","vy","dx","dy","outTransform","ax","ay","ax2","ay2","up1x","up1y","up2x","up2y","down1x","down1y","down2x","down2y","x00","y00","x10","y10","x01","y01","x11","y11","fun","ProjectionSurface","Sprite2s","Text2s","applySpine2dMixin","spineClassPrototype","graphics","Graphics","applySpine3dMixin"],"mappings":"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","x_google_ignoreList":[0]}